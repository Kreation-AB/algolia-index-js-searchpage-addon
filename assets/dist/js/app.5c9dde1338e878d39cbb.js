!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=40)}([function(e,t,r){"use strict";e.exports=r(24)},function(e,t,r){e.exports=r(28)()},function(e,t,r){"use strict";var n=r(30),i=r(13),a=r(15);function s(e,t,r){return new n(e,t,r)}s.version=r(20),s.AlgoliaSearchHelper=n,s.SearchParameters=i,s.SearchResults=a,e.exports=s},function(e,t,r){"use strict";function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}r.d(t,"a",(function(){return n}))},function(e,t,r){"use strict";e.exports=function(e,t){if(Array.isArray(e))for(var r=0;r<e.length;r++)if(t(e[r]))return e[r]}},function(e,t){var r="undefined"!=typeof Element,n="function"==typeof Map,i="function"==typeof Set,a="function"==typeof ArrayBuffer;e.exports=function(e,t){try{return function e(t,s){if(t===s)return!0;if(t&&s&&"object"==typeof t&&"object"==typeof s){if(t.constructor!==s.constructor)return!1;var c,o,u,l;if(Array.isArray(t)){if((c=t.length)!=s.length)return!1;for(o=c;0!=o--;)if(!e(t[o],s[o]))return!1;return!0}if(n&&t instanceof Map&&s instanceof Map){if(t.size!==s.size)return!1;for(l=t.entries();!(o=l.next()).done;)if(!s.has(o.value[0]))return!1;for(l=t.entries();!(o=l.next()).done;)if(!e(o.value[1],s.get(o.value[0])))return!1;return!0}if(i&&t instanceof Set&&s instanceof Set){if(t.size!==s.size)return!1;for(l=t.entries();!(o=l.next()).done;)if(!s.has(o.value[0]))return!1;return!0}if(a&&ArrayBuffer.isView(t)&&ArrayBuffer.isView(s)){if((c=t.length)!=s.length)return!1;for(o=c;0!=o--;)if(t[o]!==s[o])return!1;return!0}if(t.constructor===RegExp)return t.source===s.source&&t.flags===s.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===s.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===s.toString();if((c=(u=Object.keys(t)).length)!==Object.keys(s).length)return!1;for(o=c;0!=o--;)if(!Object.prototype.hasOwnProperty.call(s,u[o]))return!1;if(r&&t instanceof Element)return!1;for(o=c;0!=o--;)if(!("_owner"===u[o]&&t.$$typeof||e(t[u[o]],s[u[o]])))return!1;return!0}return t!=t&&s!=s}(e,t)}catch(e){if((e.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw e}}},function(e,t,r){var n;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/!function(){"use strict";var r={}.hasOwnProperty;function i(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var a=typeof n;if("string"===a||"number"===a)e.push(n);else if(Array.isArray(n)&&n.length){var s=i.apply(null,n);s&&e.push(s)}else if("object"===a)for(var c in n)r.call(n,c)&&n[c]&&e.push(c)}}return e.join(" ")}e.exports?(i.default=i,e.exports=i):void 0===(n=function(){return i}.apply(t,[]))||(e.exports=n)}()},function(e,t,r){"use strict";var n=Object.prototype.hasOwnProperty,i=Array.isArray,a=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),s=function(e,t){for(var r=t&&t.plainObjects?Object.create(null):{},n=0;n<e.length;++n)void 0!==e[n]&&(r[n]=e[n]);return r};e.exports={arrayToObject:s,assign:function(e,t){return Object.keys(t).reduce((function(e,r){return e[r]=t[r],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],r=[],n=0;n<t.length;++n)for(var a=t[n],s=a.obj[a.prop],c=Object.keys(s),o=0;o<c.length;++o){var u=c[o],l=s[u];"object"==typeof l&&null!==l&&-1===r.indexOf(l)&&(t.push({obj:s,prop:u}),r.push(l))}return function(e){for(;e.length>1;){var t=e.pop(),r=t.obj[t.prop];if(i(r)){for(var n=[],a=0;a<r.length;++a)void 0!==r[a]&&n.push(r[a]);t.obj[t.prop]=n}}}(t),e},decode:function(e,t,r){var n=e.replace(/\+/g," ");if("iso-8859-1"===r)return n.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(n)}catch(e){return n}},encode:function(e,t,r){if(0===e.length)return e;var n=e;if("symbol"==typeof e?n=Symbol.prototype.toString.call(e):"string"!=typeof e&&(n=String(e)),"iso-8859-1"===r)return escape(n).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var i="",s=0;s<n.length;++s){var c=n.charCodeAt(s);45===c||46===c||95===c||126===c||c>=48&&c<=57||c>=65&&c<=90||c>=97&&c<=122?i+=n.charAt(s):c<128?i+=a[c]:c<2048?i+=a[192|c>>6]+a[128|63&c]:c<55296||c>=57344?i+=a[224|c>>12]+a[128|c>>6&63]+a[128|63&c]:(s+=1,c=65536+((1023&c)<<10|1023&n.charCodeAt(s)),i+=a[240|c>>18]+a[128|c>>12&63]+a[128|c>>6&63]+a[128|63&c])}return i},isBuffer:function(e){return!(!e||"object"!=typeof e)&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},merge:function e(t,r,a){if(!r)return t;if("object"!=typeof r){if(i(t))t.push(r);else{if(!t||"object"!=typeof t)return[t,r];(a&&(a.plainObjects||a.allowPrototypes)||!n.call(Object.prototype,r))&&(t[r]=!0)}return t}if(!t||"object"!=typeof t)return[t].concat(r);var c=t;return i(t)&&!i(r)&&(c=s(t,a)),i(t)&&i(r)?(r.forEach((function(r,i){if(n.call(t,i)){var s=t[i];s&&"object"==typeof s&&r&&"object"==typeof r?t[i]=e(s,r,a):t.push(r)}else t[i]=r})),t):Object.keys(r).reduce((function(t,i){var s=r[i];return n.call(t,i)?t[i]=e(t[i],s,a):t[i]=s,t}),c)}}},function(e,t,r){"use strict";function n(e){return"function"==typeof e||Array.isArray(e)||"[object Object]"===Object.prototype.toString.call(e)}function i(e,t){if(e===t)return e;for(var r in t)if(Object.prototype.hasOwnProperty.call(t,r)){var a=t[r],s=e[r];void 0!==s&&void 0===a||(n(s)&&n(a)?e[r]=i(s,a):e[r]="object"==typeof(c=a)&&null!==c?i(Array.isArray(c)?[]:{},c):c)}var c;return e}e.exports=function(e){n(e)||(e={});for(var t=1,r=arguments.length;t<r;t++){var a=arguments[t];n(a)&&i(e,a)}return e}},function(e,t,r){"use strict";e.exports=function(){var e=Array.prototype.slice.call(arguments);return e.reduceRight((function(e,t){return Object.keys(Object(t)).forEach((function(r){void 0!==t[r]&&(e[r]=t[r])})),e}),{})}},function(e,t,r){"use strict";e.exports=function(e){return e&&Object.keys(e).length>0}},function(e,t,r){"use strict";var n=r(26),i=r(27),a=r(12);e.exports={formats:a,parse:i,stringify:n}},function(e,t,r){"use strict";var n=String.prototype.replace,i=/%20/g,a=r(7),s={RFC1738:"RFC1738",RFC3986:"RFC3986"};e.exports=a.assign({default:s.RFC3986,formatters:{RFC1738:function(e){return n.call(e,i,"+")},RFC3986:function(e){return String(e)}}},s)},function(e,t,r){"use strict";var n=r(8),i=r(9),a=r(31),s=r(4),c=r(32),o=r(14),u=r(10),l=r(33);function f(e,t){return Array.isArray(e)&&Array.isArray(t)?e.length===t.length&&e.every((function(e,r){return f(t[r],e)})):e===t}function h(e){var t=e?h._parseNumbers(e):{};this.facets=t.facets||[],this.disjunctiveFacets=t.disjunctiveFacets||[],this.hierarchicalFacets=t.hierarchicalFacets||[],this.facetsRefinements=t.facetsRefinements||{},this.facetsExcludes=t.facetsExcludes||{},this.disjunctiveFacetsRefinements=t.disjunctiveFacetsRefinements||{},this.numericRefinements=t.numericRefinements||{},this.tagRefinements=t.tagRefinements||[],this.hierarchicalFacetsRefinements=t.hierarchicalFacetsRefinements||{};var r=this;Object.keys(t).forEach((function(e){var n=-1!==h.PARAMETERS.indexOf(e),i=void 0!==t[e];!n&&i&&(r[e]=t[e])}))}h.PARAMETERS=Object.keys(new h),h._parseNumbers=function(e){if(e instanceof h)return e;var t={};if(["aroundPrecision","aroundRadius","getRankingInfo","minWordSizefor2Typos","minWordSizefor1Typo","page","maxValuesPerFacet","distinct","minimumAroundRadius","hitsPerPage","minProximity"].forEach((function(r){var n=e[r];if("string"==typeof n){var i=parseFloat(n);t[r]=isNaN(i)?n:i}})),Array.isArray(e.insideBoundingBox)&&(t.insideBoundingBox=e.insideBoundingBox.map((function(e){return e.map((function(e){return parseFloat(e)}))}))),e.numericRefinements){var r={};Object.keys(e.numericRefinements).forEach((function(t){var n=e.numericRefinements[t]||{};r[t]={},Object.keys(n).forEach((function(e){var i=n[e].map((function(e){return Array.isArray(e)?e.map((function(e){return"string"==typeof e?parseFloat(e):e})):"string"==typeof e?parseFloat(e):e}));r[t][e]=i}))})),t.numericRefinements=r}return n({},e,t)},h.make=function(e){var t=new h(e);return(e.hierarchicalFacets||[]).forEach((function(e){if(e.rootPath){var r=t.getHierarchicalRefinement(e.name);r.length>0&&0!==r[0].indexOf(e.rootPath)&&(t=t.clearRefinements(e.name)),0===(r=t.getHierarchicalRefinement(e.name)).length&&(t=t.toggleHierarchicalFacetRefinement(e.name,e.rootPath))}})),t},h.validate=function(e,t){var r=t||{};return e.tagFilters&&r.tagRefinements&&r.tagRefinements.length>0?new Error("[Tags] Cannot switch from the managed tag API to the advanced API. It is probably an error, if it is really what you want, you should first clear the tags with clearTags method."):e.tagRefinements.length>0&&r.tagFilters?new Error("[Tags] Cannot switch from the advanced tag API to the managed API. It is probably an error, if it is not, you should first clear the tags with clearTags method."):e.numericFilters&&r.numericRefinements&&u(r.numericRefinements)?new Error("[Numeric filters] Can't switch from the advanced to the managed API. It is probably an error, if this is really what you want, you have to first clear the numeric filters."):u(e.numericRefinements)&&r.numericFilters?new Error("[Numeric filters] Can't switch from the managed API to the advanced. It is probably an error, if this is really what you want, you have to first clear the numeric filters."):null},h.prototype={constructor:h,clearRefinements:function(e){var t={numericRefinements:this._clearNumericRefinements(e),facetsRefinements:l.clearRefinement(this.facetsRefinements,e,"conjunctiveFacet"),facetsExcludes:l.clearRefinement(this.facetsExcludes,e,"exclude"),disjunctiveFacetsRefinements:l.clearRefinement(this.disjunctiveFacetsRefinements,e,"disjunctiveFacet"),hierarchicalFacetsRefinements:l.clearRefinement(this.hierarchicalFacetsRefinements,e,"hierarchicalFacet")};return t.numericRefinements===this.numericRefinements&&t.facetsRefinements===this.facetsRefinements&&t.facetsExcludes===this.facetsExcludes&&t.disjunctiveFacetsRefinements===this.disjunctiveFacetsRefinements&&t.hierarchicalFacetsRefinements===this.hierarchicalFacetsRefinements?this:this.setQueryParameters(t)},clearTags:function(){return void 0===this.tagFilters&&0===this.tagRefinements.length?this:this.setQueryParameters({tagFilters:void 0,tagRefinements:[]})},setIndex:function(e){return e===this.index?this:this.setQueryParameters({index:e})},setQuery:function(e){return e===this.query?this:this.setQueryParameters({query:e})},setPage:function(e){return e===this.page?this:this.setQueryParameters({page:e})},setFacets:function(e){return this.setQueryParameters({facets:e})},setDisjunctiveFacets:function(e){return this.setQueryParameters({disjunctiveFacets:e})},setHitsPerPage:function(e){return this.hitsPerPage===e?this:this.setQueryParameters({hitsPerPage:e})},setTypoTolerance:function(e){return this.typoTolerance===e?this:this.setQueryParameters({typoTolerance:e})},addNumericRefinement:function(e,t,r){var i=c(r);if(this.isNumericRefined(e,t,i))return this;var a=n({},this.numericRefinements);return a[e]=n({},a[e]),a[e][t]?(a[e][t]=a[e][t].slice(),a[e][t].push(i)):a[e][t]=[i],this.setQueryParameters({numericRefinements:a})},getConjunctiveRefinements:function(e){return this.isConjunctiveFacet(e)&&this.facetsRefinements[e]||[]},getDisjunctiveRefinements:function(e){return this.isDisjunctiveFacet(e)&&this.disjunctiveFacetsRefinements[e]||[]},getHierarchicalRefinement:function(e){return this.hierarchicalFacetsRefinements[e]||[]},getExcludeRefinements:function(e){return this.isConjunctiveFacet(e)&&this.facetsExcludes[e]||[]},removeNumericRefinement:function(e,t,r){return void 0!==r?this.isNumericRefined(e,t,r)?this.setQueryParameters({numericRefinements:this._clearNumericRefinements((function(n,i){return i===e&&n.op===t&&f(n.val,c(r))}))}):this:void 0!==t?this.isNumericRefined(e,t)?this.setQueryParameters({numericRefinements:this._clearNumericRefinements((function(r,n){return n===e&&r.op===t}))}):this:this.isNumericRefined(e)?this.setQueryParameters({numericRefinements:this._clearNumericRefinements((function(t,r){return r===e}))}):this},getNumericRefinements:function(e){return this.numericRefinements[e]||{}},getNumericRefinement:function(e,t){return this.numericRefinements[e]&&this.numericRefinements[e][t]},_clearNumericRefinements:function(e){if(void 0===e)return u(this.numericRefinements)?{}:this.numericRefinements;if("string"==typeof e)return u(this.numericRefinements[e])?o(this.numericRefinements,[e]):this.numericRefinements;if("function"==typeof e){var t=!1,r=this.numericRefinements,n=Object.keys(r).reduce((function(n,i){var a=r[i],s={};return a=a||{},Object.keys(a).forEach((function(r){var n=a[r]||[],c=[];n.forEach((function(t){e({val:t,op:r},i,"numeric")||c.push(t)})),c.length!==n.length&&(t=!0),s[r]=c})),n[i]=s,n}),{});return t?n:this.numericRefinements}},addFacet:function(e){return this.isConjunctiveFacet(e)?this:this.setQueryParameters({facets:this.facets.concat([e])})},addDisjunctiveFacet:function(e){return this.isDisjunctiveFacet(e)?this:this.setQueryParameters({disjunctiveFacets:this.disjunctiveFacets.concat([e])})},addHierarchicalFacet:function(e){if(this.isHierarchicalFacet(e.name))throw new Error("Cannot declare two hierarchical facets with the same name: `"+e.name+"`");return this.setQueryParameters({hierarchicalFacets:this.hierarchicalFacets.concat([e])})},addFacetRefinement:function(e,t){if(!this.isConjunctiveFacet(e))throw new Error(e+" is not defined in the facets attribute of the helper configuration");return l.isRefined(this.facetsRefinements,e,t)?this:this.setQueryParameters({facetsRefinements:l.addRefinement(this.facetsRefinements,e,t)})},addExcludeRefinement:function(e,t){if(!this.isConjunctiveFacet(e))throw new Error(e+" is not defined in the facets attribute of the helper configuration");return l.isRefined(this.facetsExcludes,e,t)?this:this.setQueryParameters({facetsExcludes:l.addRefinement(this.facetsExcludes,e,t)})},addDisjunctiveFacetRefinement:function(e,t){if(!this.isDisjunctiveFacet(e))throw new Error(e+" is not defined in the disjunctiveFacets attribute of the helper configuration");return l.isRefined(this.disjunctiveFacetsRefinements,e,t)?this:this.setQueryParameters({disjunctiveFacetsRefinements:l.addRefinement(this.disjunctiveFacetsRefinements,e,t)})},addTagRefinement:function(e){if(this.isTagRefined(e))return this;var t={tagRefinements:this.tagRefinements.concat(e)};return this.setQueryParameters(t)},removeFacet:function(e){return this.isConjunctiveFacet(e)?this.clearRefinements(e).setQueryParameters({facets:this.facets.filter((function(t){return t!==e}))}):this},removeDisjunctiveFacet:function(e){return this.isDisjunctiveFacet(e)?this.clearRefinements(e).setQueryParameters({disjunctiveFacets:this.disjunctiveFacets.filter((function(t){return t!==e}))}):this},removeHierarchicalFacet:function(e){return this.isHierarchicalFacet(e)?this.clearRefinements(e).setQueryParameters({hierarchicalFacets:this.hierarchicalFacets.filter((function(t){return t.name!==e}))}):this},removeFacetRefinement:function(e,t){if(!this.isConjunctiveFacet(e))throw new Error(e+" is not defined in the facets attribute of the helper configuration");return l.isRefined(this.facetsRefinements,e,t)?this.setQueryParameters({facetsRefinements:l.removeRefinement(this.facetsRefinements,e,t)}):this},removeExcludeRefinement:function(e,t){if(!this.isConjunctiveFacet(e))throw new Error(e+" is not defined in the facets attribute of the helper configuration");return l.isRefined(this.facetsExcludes,e,t)?this.setQueryParameters({facetsExcludes:l.removeRefinement(this.facetsExcludes,e,t)}):this},removeDisjunctiveFacetRefinement:function(e,t){if(!this.isDisjunctiveFacet(e))throw new Error(e+" is not defined in the disjunctiveFacets attribute of the helper configuration");return l.isRefined(this.disjunctiveFacetsRefinements,e,t)?this.setQueryParameters({disjunctiveFacetsRefinements:l.removeRefinement(this.disjunctiveFacetsRefinements,e,t)}):this},removeTagRefinement:function(e){if(!this.isTagRefined(e))return this;var t={tagRefinements:this.tagRefinements.filter((function(t){return t!==e}))};return this.setQueryParameters(t)},toggleRefinement:function(e,t){return this.toggleFacetRefinement(e,t)},toggleFacetRefinement:function(e,t){if(this.isHierarchicalFacet(e))return this.toggleHierarchicalFacetRefinement(e,t);if(this.isConjunctiveFacet(e))return this.toggleConjunctiveFacetRefinement(e,t);if(this.isDisjunctiveFacet(e))return this.toggleDisjunctiveFacetRefinement(e,t);throw new Error("Cannot refine the undeclared facet "+e+"; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets")},toggleConjunctiveFacetRefinement:function(e,t){if(!this.isConjunctiveFacet(e))throw new Error(e+" is not defined in the facets attribute of the helper configuration");return this.setQueryParameters({facetsRefinements:l.toggleRefinement(this.facetsRefinements,e,t)})},toggleExcludeFacetRefinement:function(e,t){if(!this.isConjunctiveFacet(e))throw new Error(e+" is not defined in the facets attribute of the helper configuration");return this.setQueryParameters({facetsExcludes:l.toggleRefinement(this.facetsExcludes,e,t)})},toggleDisjunctiveFacetRefinement:function(e,t){if(!this.isDisjunctiveFacet(e))throw new Error(e+" is not defined in the disjunctiveFacets attribute of the helper configuration");return this.setQueryParameters({disjunctiveFacetsRefinements:l.toggleRefinement(this.disjunctiveFacetsRefinements,e,t)})},toggleHierarchicalFacetRefinement:function(e,t){if(!this.isHierarchicalFacet(e))throw new Error(e+" is not defined in the hierarchicalFacets attribute of the helper configuration");var r=this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(e)),n={};return void 0!==this.hierarchicalFacetsRefinements[e]&&this.hierarchicalFacetsRefinements[e].length>0&&(this.hierarchicalFacetsRefinements[e][0]===t||0===this.hierarchicalFacetsRefinements[e][0].indexOf(t+r))?-1===t.indexOf(r)?n[e]=[]:n[e]=[t.slice(0,t.lastIndexOf(r))]:n[e]=[t],this.setQueryParameters({hierarchicalFacetsRefinements:i({},n,this.hierarchicalFacetsRefinements)})},addHierarchicalFacetRefinement:function(e,t){if(this.isHierarchicalFacetRefined(e))throw new Error(e+" is already refined.");if(!this.isHierarchicalFacet(e))throw new Error(e+" is not defined in the hierarchicalFacets attribute of the helper configuration.");var r={};return r[e]=[t],this.setQueryParameters({hierarchicalFacetsRefinements:i({},r,this.hierarchicalFacetsRefinements)})},removeHierarchicalFacetRefinement:function(e){if(!this.isHierarchicalFacetRefined(e))return this;var t={};return t[e]=[],this.setQueryParameters({hierarchicalFacetsRefinements:i({},t,this.hierarchicalFacetsRefinements)})},toggleTagRefinement:function(e){return this.isTagRefined(e)?this.removeTagRefinement(e):this.addTagRefinement(e)},isDisjunctiveFacet:function(e){return this.disjunctiveFacets.indexOf(e)>-1},isHierarchicalFacet:function(e){return void 0!==this.getHierarchicalFacetByName(e)},isConjunctiveFacet:function(e){return this.facets.indexOf(e)>-1},isFacetRefined:function(e,t){return!!this.isConjunctiveFacet(e)&&l.isRefined(this.facetsRefinements,e,t)},isExcludeRefined:function(e,t){return!!this.isConjunctiveFacet(e)&&l.isRefined(this.facetsExcludes,e,t)},isDisjunctiveFacetRefined:function(e,t){return!!this.isDisjunctiveFacet(e)&&l.isRefined(this.disjunctiveFacetsRefinements,e,t)},isHierarchicalFacetRefined:function(e,t){if(!this.isHierarchicalFacet(e))return!1;var r=this.getHierarchicalRefinement(e);return t?-1!==r.indexOf(t):r.length>0},isNumericRefined:function(e,t,r){if(void 0===r&&void 0===t)return!!this.numericRefinements[e];var n=this.numericRefinements[e]&&void 0!==this.numericRefinements[e][t];if(void 0===r||!n)return n;var i,a,o=c(r),u=void 0!==(i=this.numericRefinements[e][t],a=o,s(i,(function(e){return f(e,a)})));return n&&u},isTagRefined:function(e){return-1!==this.tagRefinements.indexOf(e)},getRefinedDisjunctiveFacets:function(){var e=this,t=a(Object.keys(this.numericRefinements).filter((function(t){return Object.keys(e.numericRefinements[t]).length>0})),this.disjunctiveFacets);return Object.keys(this.disjunctiveFacetsRefinements).filter((function(t){return e.disjunctiveFacetsRefinements[t].length>0})).concat(t).concat(this.getRefinedHierarchicalFacets())},getRefinedHierarchicalFacets:function(){var e=this;return a(this.hierarchicalFacets.map((function(e){return e.name})),Object.keys(this.hierarchicalFacetsRefinements).filter((function(t){return e.hierarchicalFacetsRefinements[t].length>0})))},getUnrefinedDisjunctiveFacets:function(){var e=this.getRefinedDisjunctiveFacets();return this.disjunctiveFacets.filter((function(t){return-1===e.indexOf(t)}))},managedParameters:["index","facets","disjunctiveFacets","facetsRefinements","facetsExcludes","disjunctiveFacetsRefinements","numericRefinements","tagRefinements","hierarchicalFacets","hierarchicalFacetsRefinements"],getQueryParams:function(){var e=this.managedParameters,t={},r=this;return Object.keys(this).forEach((function(n){var i=r[n];-1===e.indexOf(n)&&void 0!==i&&(t[n]=i)})),t},setQueryParameter:function(e,t){if(this[e]===t)return this;var r={};return r[e]=t,this.setQueryParameters(r)},setQueryParameters:function(e){if(!e)return this;var t=h.validate(this,e);if(t)throw t;var r=this,n=h._parseNumbers(e),i=Object.keys(this).reduce((function(e,t){return e[t]=r[t],e}),{}),a=Object.keys(n).reduce((function(e,t){var r=void 0!==e[t],i=void 0!==n[t];return r&&!i?o(e,[t]):(i&&(e[t]=n[t]),e)}),i);return new this.constructor(a)},resetPage:function(){return void 0===this.page?this:this.setPage(0)},_getHierarchicalFacetSortBy:function(e){return e.sortBy||["isRefined:desc","name:asc"]},_getHierarchicalFacetSeparator:function(e){return e.separator||" > "},_getHierarchicalRootPath:function(e){return e.rootPath||null},_getHierarchicalShowParentLevel:function(e){return"boolean"!=typeof e.showParentLevel||e.showParentLevel},getHierarchicalFacetByName:function(e){return s(this.hierarchicalFacets,(function(t){return t.name===e}))},getHierarchicalFacetBreadcrumb:function(e){if(!this.isHierarchicalFacet(e))return[];var t=this.getHierarchicalRefinement(e)[0];if(!t)return[];var r=this._getHierarchicalFacetSeparator(this.getHierarchicalFacetByName(e));return t.split(r).map((function(e){return e.trim()}))},toString:function(){return JSON.stringify(this,null,2)}},e.exports=h},function(e,t,r){"use strict";e.exports=function(e,t){if(null===e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}},function(e,t,r){"use strict";var n=r(8),i=r(9),a=r(16),s=r(34),c=r(4),o=r(35),u=r(17),l=r(36);function f(e){var t={};return e.forEach((function(e,r){t[e]=r})),t}function h(e,t,r){t&&t[r]&&(e.stats=t[r])}function d(e,t){var r=t[0];this._rawResults=t,this.query=r.query,this.parsedQuery=r.parsedQuery,this.hits=r.hits,this.index=r.index,this.hitsPerPage=r.hitsPerPage,this.nbHits=r.nbHits,this.nbPages=r.nbPages,this.page=r.page,this.processingTimeMS=t.reduce((function(e,t){return void 0===t.processingTimeMS?e:e+t.processingTimeMS}),0),this.aroundLatLng=r.aroundLatLng,this.automaticRadius=r.automaticRadius,this.serverUsed=r.serverUsed,this.timeoutCounts=r.timeoutCounts,this.timeoutHits=r.timeoutHits,this.exhaustiveFacetsCount=r.exhaustiveFacetsCount,this.exhaustiveNbHits=r.exhaustiveNbHits,this.userData=r.userData,this.queryID=r.queryID,this.disjunctiveFacets=[],this.hierarchicalFacets=e.hierarchicalFacets.map((function(){return[]})),this.facets=[];var a=e.getRefinedDisjunctiveFacets(),u=f(e.facets),d=f(e.disjunctiveFacets),p=1,m=this,g=r.facets||{};Object.keys(g).forEach((function(t){var n,i,a=g[t],s=(n=e.hierarchicalFacets,i=t,c(n,(function(e){return(e.attributes||[]).indexOf(i)>-1})));if(s){var l=s.attributes.indexOf(t),f=o(e.hierarchicalFacets,(function(e){return e.name===s.name}));m.hierarchicalFacets[f][l]={attribute:t,data:a,exhaustive:r.exhaustiveFacetsCount}}else{var p,v=-1!==e.disjunctiveFacets.indexOf(t),y=-1!==e.facets.indexOf(t);v&&(p=d[t],m.disjunctiveFacets[p]={name:t,data:a,exhaustive:r.exhaustiveFacetsCount},h(m.disjunctiveFacets[p],r.facets_stats,t)),y&&(p=u[t],m.facets[p]={name:t,data:a,exhaustive:r.exhaustiveFacetsCount},h(m.facets[p],r.facets_stats,t))}})),this.hierarchicalFacets=s(this.hierarchicalFacets),a.forEach((function(a){var s=t[p],c=s&&s.facets?s.facets:{},u=e.getHierarchicalFacetByName(a);Object.keys(c).forEach((function(t){var a,l=c[t];if(u){a=o(e.hierarchicalFacets,(function(e){return e.name===u.name}));var f=o(m.hierarchicalFacets[a],(function(e){return e.attribute===t}));if(-1===f)return;m.hierarchicalFacets[a][f].data=n({},m.hierarchicalFacets[a][f].data,l)}else{a=d[t];var p=r.facets&&r.facets[t]||{};m.disjunctiveFacets[a]={name:t,data:i({},l,p),exhaustive:s.exhaustiveFacetsCount},h(m.disjunctiveFacets[a],s.facets_stats,t),e.disjunctiveFacetsRefinements[t]&&e.disjunctiveFacetsRefinements[t].forEach((function(r){!m.disjunctiveFacets[a].data[r]&&e.disjunctiveFacetsRefinements[t].indexOf(r)>-1&&(m.disjunctiveFacets[a].data[r]=0)}))}})),p++})),e.getRefinedHierarchicalFacets().forEach((function(r){var n=e.getHierarchicalFacetByName(r),a=e._getHierarchicalFacetSeparator(n),s=e.getHierarchicalRefinement(r);if(!(0===s.length||s[0].split(a).length<2)){var c=t[p],u=c&&c.facets?c.facets:{};Object.keys(u).forEach((function(t){var r=u[t],c=o(e.hierarchicalFacets,(function(e){return e.name===n.name})),l=o(m.hierarchicalFacets[c],(function(e){return e.attribute===t}));if(-1!==l){var f={};if(s.length>0){var h=s[0].split(a)[0];f[h]=m.hierarchicalFacets[c][l].data[h]}m.hierarchicalFacets[c][l].data=i(f,r,m.hierarchicalFacets[c][l].data)}})),p++}})),Object.keys(e.facetsExcludes).forEach((function(t){var n=e.facetsExcludes[t],i=u[t];m.facets[i]={name:t,data:r.facets[t],exhaustive:r.exhaustiveFacetsCount},n.forEach((function(e){m.facets[i]=m.facets[i]||{name:t},m.facets[i].data=m.facets[i].data||{},m.facets[i].data[e]=0}))})),this.hierarchicalFacets=this.hierarchicalFacets.map(l(e)),this.facets=s(this.facets),this.disjunctiveFacets=s(this.disjunctiveFacets),this._state=e}function p(e,t){if(!t.data||0===t.data.length)return t;var r=t.data.map((function(t){return p(e,t)})),i=e(r);return n({},t,{data:i})}function m(e,t){var r=c(e,(function(e){return e.name===t}));return r&&r.stats}function g(e,t,r,n,i){var a=c(i,(function(e){return e.name===r})),s=a&&a.data&&a.data[n]?a.data[n]:0,o=a&&a.exhaustive||!1;return{type:t,attributeName:r,name:n,count:s,exhaustive:o}}d.prototype.getFacetByName=function(e){function t(t){return t.name===e}return c(this.facets,t)||c(this.disjunctiveFacets,t)||c(this.hierarchicalFacets,t)},d.DEFAULT_SORT=["isRefined:desc","count:desc","name:asc"],d.prototype.getFacetValues=function(e,t){var r=function(e,t){function r(e){return e.name===t}if(e._state.isConjunctiveFacet(t)){var n=c(e.facets,r);return n?Object.keys(n.data).map((function(r){return{name:r,count:n.data[r],isRefined:e._state.isFacetRefined(t,r),isExcluded:e._state.isExcludeRefined(t,r)}})):[]}if(e._state.isDisjunctiveFacet(t)){var i=c(e.disjunctiveFacets,r);return i?Object.keys(i.data).map((function(r){return{name:r,count:i.data[r],isRefined:e._state.isDisjunctiveFacetRefined(t,r)}})):[]}if(e._state.isHierarchicalFacet(t))return c(e.hierarchicalFacets,r)}(this,e);if(r){var n=i({},t,{sortBy:d.DEFAULT_SORT});if(Array.isArray(n.sortBy)){var s=u(n.sortBy,d.DEFAULT_SORT);return Array.isArray(r)?a(r,s[0],s[1]):p((function(e){return a(e,s[0],s[1])}),r)}if("function"==typeof n.sortBy)return Array.isArray(r)?r.sort(n.sortBy):p((function(e){return function(e,t){return t.sort(e)}(n.sortBy,e)}),r);throw new Error("options.sortBy is optional but if defined it must be either an array of string (predicates) or a sorting function")}},d.prototype.getFacetStats=function(e){return this._state.isConjunctiveFacet(e)?m(this.facets,e):this._state.isDisjunctiveFacet(e)?m(this.disjunctiveFacets,e):void 0},d.prototype.getRefinements=function(){var e=this._state,t=this,r=[];return Object.keys(e.facetsRefinements).forEach((function(n){e.facetsRefinements[n].forEach((function(i){r.push(g(e,"facet",n,i,t.facets))}))})),Object.keys(e.facetsExcludes).forEach((function(n){e.facetsExcludes[n].forEach((function(i){r.push(g(e,"exclude",n,i,t.facets))}))})),Object.keys(e.disjunctiveFacetsRefinements).forEach((function(n){e.disjunctiveFacetsRefinements[n].forEach((function(i){r.push(g(e,"disjunctive",n,i,t.disjunctiveFacets))}))})),Object.keys(e.hierarchicalFacetsRefinements).forEach((function(n){e.hierarchicalFacetsRefinements[n].forEach((function(i){r.push(function(e,t,r,n){var i=e.getHierarchicalFacetByName(t),a=e._getHierarchicalFacetSeparator(i),s=r.split(a),o=c(n,(function(e){return e.name===t})),u=s.reduce((function(e,t){var r=e&&c(e.data,(function(e){return e.name===t}));return void 0!==r?r:e}),o),l=u&&u.count||0,f=u&&u.exhaustive||!1,h=u&&u.path||"";return{type:"hierarchical",attributeName:t,name:h,count:l,exhaustive:f}}(e,n,i,t.hierarchicalFacets))}))})),Object.keys(e.numericRefinements).forEach((function(t){var n=e.numericRefinements[t];Object.keys(n).forEach((function(e){n[e].forEach((function(n){r.push({type:"numeric",attributeName:t,name:n,numericValue:n,operator:e})}))}))})),e.tagRefinements.forEach((function(e){r.push({type:"tag",attributeName:"_tags",name:e})})),r},e.exports=d},function(e,t,r){"use strict";function n(e,t){if(e!==t){var r=void 0!==e,n=null===e,i=void 0!==t,a=null===t;if(!a&&e>t||n&&i||!r)return 1;if(!n&&e<t||a&&r||!i)return-1}return 0}e.exports=function(e,t,r){if(!Array.isArray(e))return[];Array.isArray(r)||(r=[]);var i=e.map((function(e,r){return{criteria:t.map((function(t){return e[t]})),index:r,value:e}}));return i.sort((function(e,t){for(var i=-1;++i<e.criteria.length;){var a=n(e.criteria[i],t.criteria[i]);if(a)return i>=r.length?a:"desc"===r[i]?-a:a}return e.index-t.index})),i.map((function(e){return e.value}))}},function(e,t,r){"use strict";var n=r(4);e.exports=function(e,t){var r=(t||[]).map((function(e){return e.split(":")}));return e.reduce((function(e,t){var i=t.split(":"),a=n(r,(function(e){return e[0]===i[0]}));return i.length>1||!a?(e[0].push(i[0]),e[1].push(i[1]),e):(e[0].push(a[0]),e[1].push(a[1]),e)}),[[],[]])}},function(e,t,r){"use strict";var n,i="object"==typeof Reflect?Reflect:null,a=i&&"function"==typeof i.apply?i.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};n=i&&"function"==typeof i.ownKeys?i.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function c(){c.init.call(this)}e.exports=c,c.EventEmitter=c,c.prototype._events=void 0,c.prototype._eventsCount=0,c.prototype._maxListeners=void 0;var o=10;function u(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?c.defaultMaxListeners:e._maxListeners}function f(e,t,r,n){var i,a,s,c;if(u(r),void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),a=e._events),s=a[t]),void 0===s)s=a[t]=r,++e._eventsCount;else if("function"==typeof s?s=a[t]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(i=l(e))>0&&s.length>i&&!s.warned){s.warned=!0;var o=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");o.name="MaxListenersExceededWarning",o.emitter=e,o.type=t,o.count=s.length,c=o,console&&console.warn&&console.warn(c)}return e}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function d(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=h.bind(n);return i.listener=r,n.wrapFn=i,i}function p(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):g(i,i.length)}function m(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function g(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}Object.defineProperty(c,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),c.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},c.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},c.prototype.getMaxListeners=function(){return l(this)},c.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var c=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw c.context=s,c}var o=i[e];if(void 0===o)return!1;if("function"==typeof o)a(o,this,t);else{var u=o.length,l=g(o,u);for(r=0;r<u;++r)a(l[r],this,t)}return!0},c.prototype.addListener=function(e,t){return f(this,e,t,!1)},c.prototype.on=c.prototype.addListener,c.prototype.prependListener=function(e,t){return f(this,e,t,!0)},c.prototype.once=function(e,t){return u(t),this.on(e,d(this,e,t)),this},c.prototype.prependOnceListener=function(e,t){return u(t),this.prependListener(e,d(this,e,t)),this},c.prototype.removeListener=function(e,t){var r,n,i,a,s;if(u(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,a=r.length-1;a>=0;a--)if(r[a]===t||r[a].listener===t){s=r[a].listener,i=a;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,s||t)}return this},c.prototype.off=c.prototype.removeListener,c.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,a=Object.keys(r);for(n=0;n<a.length;++n)"removeListener"!==(i=a[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},c.prototype.listeners=function(e){return p(this,e,!0)},c.prototype.rawListeners=function(e){return p(this,e,!1)},c.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):m.call(e,t)},c.prototype.listenerCount=m,c.prototype.eventNames=function(){return this._eventsCount>0?n(this._events):[]}},function(e,t,r){"use strict";e.exports=function(e,t){e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}},function(e,t,r){"use strict";e.exports="3.1.1"},function(e,t,r){
/*! algoliasearch-lite.umd.js | 4.1.0 | © Algolia, inc. | https://github.com/algolia/algoliasearch-client-javascript */
e.exports=function(){"use strict";function e(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function t(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function r(r){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?t(Object(i),!0).forEach((function(t){e(r,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(i)):t(Object(i)).forEach((function(e){Object.defineProperty(r,e,Object.getOwnPropertyDescriptor(i,e))}))}return r}function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var r=[],n=!0,i=!1,a=void 0;try{for(var s,c=e[Symbol.iterator]();!(n=(s=c.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){i=!0,a=e}finally{try{n||null==c.return||c.return()}finally{if(i)throw a}}return r}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function i(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function a(e){var t,r="algoliasearch-client-js-".concat(e.key),i=function(){return void 0===t&&(t=e.localStorage||window.localStorage),t},a=function(){return JSON.parse(i().getItem(r)||"{}")};return{get:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{miss:function(){return Promise.resolve()}};return Promise.resolve().then((function(){var r=JSON.stringify(e),n=a()[r];return Promise.all([n||t(),void 0!==n])})).then((function(e){var t=n(e,2),i=t[0],a=t[1];return Promise.all([i,a||r.miss(i)])})).then((function(e){return n(e,1)[0]}))},set:function(e,t){return Promise.resolve().then((function(){var n=a();return n[JSON.stringify(e)]=t,i().setItem(r,JSON.stringify(n)),t}))},delete:function(e){return Promise.resolve().then((function(){var t=a();delete t[JSON.stringify(e)],i().setItem(r,JSON.stringify(t))}))},clear:function(){return Promise.resolve().then((function(){i().removeItem(r)}))}}}function s(e){var t=i(e.caches),r=t.shift();return void 0===r?{get:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{miss:function(){return Promise.resolve()}},i=t();return i.then((function(e){return Promise.all([e,r.miss(e)])})).then((function(e){return n(e,1)[0]}))},set:function(e,t){return Promise.resolve(t)},delete:function(e){return Promise.resolve()},clear:function(){return Promise.resolve()}}:{get:function(e,n){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{miss:function(){return Promise.resolve()}};return r.get(e,n,i).catch((function(){return s({caches:t}).get(e,n,i)}))},set:function(e,n){return r.set(e,n).catch((function(){return s({caches:t}).set(e,n)}))},delete:function(e){return r.delete(e).catch((function(){return s({caches:t}).delete(e)}))},clear:function(){return r.clear().catch((function(){return s({caches:t}).clear()}))}}}function c(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{serializable:!0},t={};return{get:function(r,n){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{miss:function(){return Promise.resolve()}},a=JSON.stringify(r);if(a in t)return Promise.resolve(e.serializable?JSON.parse(t[a]):t[a]);var s=n(),c=i&&i.miss||function(){return Promise.resolve()};return s.then((function(e){return c(e)})).then((function(){return s}))},set:function(r,n){return t[JSON.stringify(r)]=e.serializable?JSON.stringify(n):n,Promise.resolve(n)},delete:function(e){return delete t[JSON.stringify(e)],Promise.resolve()},clear:function(){return t={},Promise.resolve()}}}function o(e){for(var t=e.length-1;t>0;t--){var r=Math.floor(Math.random()*(t+1)),n=e[t];e[t]=e[r],e[r]=n}return e}function u(e,t){return Object.keys(void 0!==t?t:{}).forEach((function(r){e[r]=t[r](e)})),e}function l(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];var i=0;return e.replace(/%s/g,(function(){return encodeURIComponent(r[i++])}))}var f=0,h=1;function d(e,t){var r=e||{},n=r.data||{};return Object.keys(r).forEach((function(e){-1===["timeout","headers","queryParameters","data","cacheable"].indexOf(e)&&(n[e]=r[e])})),{data:Object.entries(n).length>0?n:void 0,timeout:r.timeout||t,headers:r.headers||{},queryParameters:r.queryParameters||{},cacheable:r.cacheable}}var p={Read:1,Write:2,Any:3};function m(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return r({},e,{status:t,lastUpdate:Date.now()})}function g(e){return{protocol:e.protocol||"https",url:e.url,accept:e.accept||p.Any}}var v="POST";function y(e,t,n,a){var s=[],c=function(e,t){if("GET"!==e.method&&(void 0!==e.data||void 0!==t.data)){var n=Array.isArray(e.data)?e.data:r({},e.data,{},t.data);return JSON.stringify(n)}}(n,a),o=function(e,t){var n=r({},e.headers,{},t.headers),i={};return Object.keys(n).forEach((function(e){var t=n[e];i[e.toLowerCase()]=t})),i}(e,a),u=n.method,l="GET"!==n.method?{}:r({},n.data,{},a.data),f=r({"x-algolia-agent":e.userAgent.value},e.queryParameters,{},l,{},a.queryParameters),h=0,d=function t(r,i){var l=r.pop();if(void 0===l)throw{name:"RetryError",message:"Unreachable hosts - your application id may be incorrect. If the error persists, contact support@algolia.com.",transporterStackTrace:F(s)};var d={data:c,headers:o,method:u,url:x(l,n.path,f),connectTimeout:i(h,e.timeouts.connect),responseTimeout:i(h,a.timeout)},p=function(e){var t={request:d,response:e,host:l,triesLeft:r.length};return s.push(t),t},g={onSucess:function(e){return function(e){try{return JSON.parse(e.content)}catch(t){throw function(e,t){return{name:"DeserializationError",message:e,response:t}}(t.message,e)}}(e)},onRetry:function(n){var a=p(n);return n.isTimedOut&&h++,Promise.all([e.logger.info("Retryable failure",S(a)),e.hostsCache.set(l,m(l,n.isTimedOut?3:2))]).then((function(){return t(r,i)}))},onFail:function(e){throw p(e),function(e,t){var r=e.content,n=e.status,i=r;try{i=JSON.parse(r).message}catch(e){}return function(e,t,r){return{name:"ApiError",message:e,status:t,transporterStackTrace:r}}(i,n,t)}(e,F(s))}};return e.requester.send(d).then((function(e){return function(e,t){return function(e){var t=e.status;return e.isTimedOut||function(e){var t=e.isTimedOut,r=e.status;return!t&&0==~~r}(e)||2!=~~(t/100)&&4!=~~(t/100)}(e)?t.onRetry(e):2==~~(e.status/100)?t.onSucess(e):t.onFail(e)}(e,g)}))};return function(e,t){return Promise.all(t.map((function(t){return e.get(t,(function(){return Promise.resolve(m(t))}))}))).then((function(e){var r=e.filter((function(e){return function(e){return 1===e.status||Date.now()-e.lastUpdate>12e4}(e)})),n=e.filter((function(e){return function(e){return 3===e.status&&Date.now()-e.lastUpdate<=12e4}(e)})),a=[].concat(i(r),i(n));return{getTimeout:function(e,t){return(0===n.length&&0===e?1:n.length+3+e)*t},statelessHosts:a.length>0?a.map((function(e){return g(e)})):t}}))}(e.hostsCache,t).then((function(e){return d(i(e.statelessHosts).reverse(),e.getTimeout)}))}function b(e){var t={value:"Algolia for JavaScript (".concat(e,")"),add:function(e){var r="; ".concat(e.segment).concat(void 0!==e.version?" (".concat(e.version,")"):"");return-1===t.value.indexOf(r)&&(t.value="".concat(t.value).concat(r)),t}};return t}function x(e,t,r){var n=R(r),i="".concat(e.protocol,"://").concat(e.url,"/").concat("/"===t.charAt(0)?t.substr(1):t);return n.length&&(i+="?".concat(n)),i}function R(e){return Object.keys(e).map((function(t){return l("%s=%s",t,(r=e[t],"[object Object]"===Object.prototype.toString.call(r)||"[object Array]"===Object.prototype.toString.call(r)?JSON.stringify(e[t]):e[t]));var r})).join("&")}function F(e){return e.map((function(e){return S(e)}))}function S(e){var t=e.request.headers["x-algolia-api-key"]?{"x-algolia-api-key":"*****"}:{};return r({},e,{request:r({},e.request,{headers:r({},e.request.headers,{},t)})})}var P=function(e){var t=e.appId,i=function(e,t,r){var n={"x-algolia-api-key":r,"x-algolia-application-id":t};return{headers:function(){return e===h?n:{}},queryParameters:function(){return e===f?n:{}}}}(void 0!==e.authMode?e.authMode:h,t,e.apiKey),a=function(e){var t=e.hostsCache,r=e.logger,i=e.requester,a=e.requestsCache,s=e.responsesCache,c=e.timeouts,o=e.userAgent,u=e.hosts,l=e.queryParameters,f={hostsCache:t,logger:r,requester:i,requestsCache:a,responsesCache:s,timeouts:c,userAgent:o,headers:e.headers,queryParameters:l,hosts:u.map((function(e){return g(e)})),read:function(e,t){var r=d(t,f.timeouts.read),i=function(){return y(f,f.hosts.filter((function(e){return 0!=(e.accept&p.Read)})),e,r)};if(!0!==(void 0!==r.cacheable?r.cacheable:e.cacheable))return i();var a={request:e,mappedRequestOptions:r,transporter:{queryParameters:f.queryParameters,headers:f.headers}};return f.responsesCache.get(a,(function(){return f.requestsCache.get(a,(function(){return f.requestsCache.set(a,i()).then((function(e){return Promise.all([f.requestsCache.delete(a),e])}),(function(e){return Promise.all([f.requestsCache.delete(a),Promise.reject(e)])})).then((function(e){var t=n(e,2);return t[0],t[1]}))}))}),{miss:function(e){return f.responsesCache.set(a,e)}})},write:function(e,t){return y(f,f.hosts.filter((function(e){return 0!=(e.accept&p.Write)})),e,d(t,f.timeouts.write))}};return f}(r({hosts:[{url:"".concat(t,"-dsn.algolia.net"),accept:p.Read},{url:"".concat(t,".algolia.net"),accept:p.Write}].concat(o([{url:"".concat(t,"-1.algolianet.com")},{url:"".concat(t,"-2.algolianet.com")},{url:"".concat(t,"-3.algolianet.com")}]))},e,{headers:r({},i.headers(),{},{"content-type":"application/x-www-form-urlencoded"},{},e.headers),queryParameters:r({},i.queryParameters(),{},e.queryParameters)}));return u({transporter:a,appId:t,addAlgoliaAgent:function(e,t){a.userAgent.add({segment:e,version:t})},clearCache:function(){return Promise.all([a.requestsCache.clear(),a.responsesCache.clear()]).then((function(){}))}},e.methods)},j=function(e){return function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n={transporter:e.transporter,appId:e.appId,indexName:t};return u(n,r.methods)}},O=function(e){return function(t,n){var i=t.map((function(e){return r({},e,{params:R(e.params||{})})}));return e.transporter.read({method:v,path:"1/indexes/*/queries",data:{requests:i},cacheable:!0},n)}},w=function(e){return function(t,n){return Promise.all(t.map((function(t){var i=t.params,a=i.facetName,s=i.facetQuery,c=function(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}(i,["facetName","facetQuery"]);return j(e)(t.indexName,{methods:{searchForFacetValues:_}}).searchForFacetValues(a,s,r({},n,{},c))})))}},E=function(e){return function(t,r){return e.transporter.read({method:v,path:l("1/indexes/%s/query",e.indexName),data:{query:t},cacheable:!0},r)}},_=function(e){return function(t,r,n){return e.transporter.read({method:v,path:l("1/indexes/%s/facets/%s/query",e.indexName,t),data:{facetQuery:r},cacheable:!0},n)}};function C(e,t,n){var i={appId:e,apiKey:t,timeouts:{connect:1,read:2,write:30},requester:{send:function(e){return new Promise((function(t){var r=new XMLHttpRequest;r.open(e.method,e.url,!0),Object.keys(e.headers).forEach((function(t){return r.setRequestHeader(t,e.headers[t])}));var n,i=function(e,n){return setTimeout((function(){r.abort(),t({status:0,content:n,isTimedOut:!0})}),1e3*e)},a=i(e.connectTimeout,"Connection timeout");r.onreadystatechange=function(){r.readyState>r.OPENED&&void 0===n&&(clearTimeout(a),n=i(e.responseTimeout,"Socket timeout"))},r.onerror=function(){0===r.status&&(clearTimeout(a),clearTimeout(n),t({content:r.responseText||"Network request failed",status:r.status,isTimedOut:!1}))},r.onload=function(){clearTimeout(a),clearTimeout(n),t({content:r.responseText,status:r.status,isTimedOut:!1})},r.send(e.data)}))}},logger:{debug:function(e,t){return Promise.resolve()},info:function(e,t){return Promise.resolve()},error:function(e,t){return console.error(e,t),Promise.resolve()}},responsesCache:c(),requestsCache:c({serializable:!1}),hostsCache:s({caches:[a({key:"".concat("4.1.0","-").concat(e)}),c()]}),userAgent:b("4.1.0").add({segment:"Browser",version:"lite"}),authMode:f};return P(r({},i,{},n,{methods:{search:O,searchForFacetValues:w,multipleQueries:O,multipleSearchForFacetValues:w,initIndex:function(e){return function(t){return j(e)(t,{methods:{search:E,searchForFacetValues:_}})}}}}))}return C.version="4.1.0",C}()},function(e,t,r){"use strict";r.d(t,"a",(function(){return i}));var n=r(3);function i(e,t){if(e){if("string"==typeof e)return Object(n.a)(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(r):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Object(n.a)(e,t):void 0}}},,function(e,t,r){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n=r(25),i="function"==typeof Symbol&&Symbol.for,a=i?Symbol.for("react.element"):60103,s=i?Symbol.for("react.portal"):60106,c=i?Symbol.for("react.fragment"):60107,o=i?Symbol.for("react.strict_mode"):60108,u=i?Symbol.for("react.profiler"):60114,l=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,h=i?Symbol.for("react.forward_ref"):60112,d=i?Symbol.for("react.suspense"):60113,p=i?Symbol.for("react.memo"):60115,m=i?Symbol.for("react.lazy"):60116,g="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function x(e,t,r){this.props=e,this.context=t,this.refs=b,this.updater=r||y}function R(){}function F(e,t,r){this.props=e,this.context=t,this.refs=b,this.updater=r||y}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},R.prototype=x.prototype;var S=F.prototype=new R;S.constructor=F,n(S,x.prototype),S.isPureReactComponent=!0;var P={current:null},j=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function w(e,t,r){var n,i={},s=null,c=null;if(null!=t)for(n in void 0!==t.ref&&(c=t.ref),void 0!==t.key&&(s=""+t.key),t)j.call(t,n)&&!O.hasOwnProperty(n)&&(i[n]=t[n]);var o=arguments.length-2;if(1===o)i.children=r;else if(1<o){for(var u=Array(o),l=0;l<o;l++)u[l]=arguments[l+2];i.children=u}if(e&&e.defaultProps)for(n in o=e.defaultProps)void 0===i[n]&&(i[n]=o[n]);return{$$typeof:a,type:e,key:s,ref:c,props:i,_owner:P.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var _=/\/+/g,C=[];function N(e,t,r,n){if(C.length){var i=C.pop();return i.result=e,i.keyPrefix=t,i.func=r,i.context=n,i.count=0,i}return{result:e,keyPrefix:t,func:r,context:n,count:0}}function A(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>C.length&&C.push(e)}function k(e,t,r){return null==e?0:function e(t,r,n,i){var c=typeof t;"undefined"!==c&&"boolean"!==c||(t=null);var o=!1;if(null===t)o=!0;else switch(c){case"string":case"number":o=!0;break;case"object":switch(t.$$typeof){case a:case s:o=!0}}if(o)return n(i,t,""===r?"."+T(t,0):r),1;if(o=0,r=""===r?".":r+":",Array.isArray(t))for(var u=0;u<t.length;u++){var l=r+T(c=t[u],u);o+=e(c,l,n,i)}else if(null===t||"object"!=typeof t?l=null:l="function"==typeof(l=g&&t[g]||t["@@iterator"])?l:null,"function"==typeof l)for(t=l.call(t),u=0;!(c=t.next()).done;)o+=e(c=c.value,l=r+T(c,u++),n,i);else if("object"===c)throw n=""+t,Error(v(31,"[object Object]"===n?"object with keys {"+Object.keys(t).join(", ")+"}":n,""));return o}(e,"",t,r)}function T(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function V(e,t){e.func.call(e.context,t,e.count++)}function H(e,t,r){var n=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?I(e,n,r,(function(e){return e})):null!=e&&(E(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(_,"$&/")+"/")+r)),n.push(e))}function I(e,t,r,n,i){var a="";null!=r&&(a=(""+r).replace(_,"$&/")+"/"),k(e,H,t=N(t,a,n,i)),A(t)}var D={current:null};function Q(){var e=D.current;if(null===e)throw Error(v(321));return e}var q={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:P,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:function(e,t,r){if(null==e)return e;var n=[];return I(e,n,null,t,r),n},forEach:function(e,t,r){if(null==e)return e;k(e,V,t=N(null,null,t,r)),A(t)},count:function(e){return k(e,(function(){return null}),null)},toArray:function(e){var t=[];return I(e,t,null,(function(e){return e})),t},only:function(e){if(!E(e))throw Error(v(143));return e}},t.Component=x,t.Fragment=c,t.Profiler=u,t.PureComponent=F,t.StrictMode=o,t.Suspense=d,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=q,t.cloneElement=function(e,t,r){if(null==e)throw Error(v(267,e));var i=n({},e.props),s=e.key,c=e.ref,o=e._owner;if(null!=t){if(void 0!==t.ref&&(c=t.ref,o=P.current),void 0!==t.key&&(s=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(l in t)j.call(t,l)&&!O.hasOwnProperty(l)&&(i[l]=void 0===t[l]&&void 0!==u?u[l]:t[l])}var l=arguments.length-2;if(1===l)i.children=r;else if(1<l){u=Array(l);for(var f=0;f<l;f++)u[f]=arguments[f+2];i.children=u}return{$$typeof:a,type:e.type,key:s,ref:c,props:i,_owner:o}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=w,t.createFactory=function(e){var t=w.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:h,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:p,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return Q().useCallback(e,t)},t.useContext=function(e,t){return Q().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return Q().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return Q().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return Q().useLayoutEffect(e,t)},t.useMemo=function(e,t){return Q().useMemo(e,t)},t.useReducer=function(e,t,r){return Q().useReducer(e,t,r)},t.useRef=function(e){return Q().useRef(e)},t.useState=function(e){return Q().useState(e)},t.version="16.13.1"},function(e,t,r){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var n=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function s(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,c,o=s(e),u=1;u<arguments.length;u++){for(var l in r=Object(arguments[u]))i.call(r,l)&&(o[l]=r[l]);if(n){c=n(r);for(var f=0;f<c.length;f++)a.call(r,c[f])&&(o[c[f]]=r[c[f]])}}return o}},function(e,t,r){"use strict";var n=r(7),i=r(12),a=Object.prototype.hasOwnProperty,s={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},c=Array.isArray,o=Array.prototype.push,u=function(e,t){o.apply(e,c(t)?t:[t])},l=Date.prototype.toISOString,f=i.default,h={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:n.encode,encodeValuesOnly:!1,format:f,formatter:i.formatters[f],indices:!1,serializeDate:function(e){return l.call(e)},skipNulls:!1,strictNullHandling:!1},d=function e(t,r,i,a,s,o,l,f,d,p,m,g,v){var y,b=t;if("function"==typeof l?b=l(r,b):b instanceof Date?b=p(b):"comma"===i&&c(b)&&(b=b.join(",")),null===b){if(a)return o&&!g?o(r,h.encoder,v,"key"):r;b=""}if("string"==typeof(y=b)||"number"==typeof y||"boolean"==typeof y||"symbol"==typeof y||"bigint"==typeof y||n.isBuffer(b))return o?[m(g?r:o(r,h.encoder,v,"key"))+"="+m(o(b,h.encoder,v,"value"))]:[m(r)+"="+m(String(b))];var x,R=[];if(void 0===b)return R;if(c(l))x=l;else{var F=Object.keys(b);x=f?F.sort(f):F}for(var S=0;S<x.length;++S){var P=x[S];s&&null===b[P]||(c(b)?u(R,e(b[P],"function"==typeof i?i(r,P):r,i,a,s,o,l,f,d,p,m,g,v)):u(R,e(b[P],r+(d?"."+P:"["+P+"]"),i,a,s,o,l,f,d,p,m,g,v)))}return R};e.exports=function(e,t){var r,n=e,o=function(e){if(!e)return h;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||h.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var r=i.default;if(void 0!==e.format){if(!a.call(i.formatters,e.format))throw new TypeError("Unknown format option provided.");r=e.format}var n=i.formatters[r],s=h.filter;return("function"==typeof e.filter||c(e.filter))&&(s=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:h.addQueryPrefix,allowDots:void 0===e.allowDots?h.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:h.charsetSentinel,delimiter:void 0===e.delimiter?h.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:h.encode,encoder:"function"==typeof e.encoder?e.encoder:h.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:h.encodeValuesOnly,filter:s,formatter:n,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:h.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:h.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:h.strictNullHandling}}(t);"function"==typeof o.filter?n=(0,o.filter)("",n):c(o.filter)&&(r=o.filter);var l,f=[];if("object"!=typeof n||null===n)return"";l=t&&t.arrayFormat in s?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var p=s[l];r||(r=Object.keys(n)),o.sort&&r.sort(o.sort);for(var m=0;m<r.length;++m){var g=r[m];o.skipNulls&&null===n[g]||u(f,d(n[g],g,p,o.strictNullHandling,o.skipNulls,o.encode?o.encoder:null,o.filter,o.sort,o.allowDots,o.serializeDate,o.formatter,o.encodeValuesOnly,o.charset))}var v=f.join(o.delimiter),y=!0===o.addQueryPrefix?"?":"";return o.charsetSentinel&&("iso-8859-1"===o.charset?y+="utf8=%26%2310003%3B&":y+="utf8=%E2%9C%93&"),v.length>0?y+v:""}},function(e,t,r){"use strict";var n=r(7),i=Object.prototype.hasOwnProperty,a=Array.isArray,s={allowDots:!1,allowPrototypes:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:n.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},c=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},o=function(e,t){return e&&"string"==typeof e&&t.comma&&e.indexOf(",")>-1?e.split(","):e},u=function(e,t){if(a(e)){for(var r=[],n=0;n<e.length;n+=1)r.push(t(e[n]));return r}return t(e)},l=function(e,t,r,n){if(e){var a=r.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,s=/(\[[^[\]]*])/g,c=r.depth>0&&/(\[[^[\]]*])/.exec(a),u=c?a.slice(0,c.index):a,l=[];if(u){if(!r.plainObjects&&i.call(Object.prototype,u)&&!r.allowPrototypes)return;l.push(u)}for(var f=0;r.depth>0&&null!==(c=s.exec(a))&&f<r.depth;){if(f+=1,!r.plainObjects&&i.call(Object.prototype,c[1].slice(1,-1))&&!r.allowPrototypes)return;l.push(c[1])}return c&&l.push("["+a.slice(c.index)+"]"),function(e,t,r,n){for(var i=n?t:o(t,r),a=e.length-1;a>=0;--a){var s,c=e[a];if("[]"===c&&r.parseArrays)s=[].concat(i);else{s=r.plainObjects?Object.create(null):{};var u="["===c.charAt(0)&&"]"===c.charAt(c.length-1)?c.slice(1,-1):c,l=parseInt(u,10);r.parseArrays||""!==u?!isNaN(l)&&c!==u&&String(l)===u&&l>=0&&r.parseArrays&&l<=r.arrayLimit?(s=[])[l]=i:s[u]=i:s={0:i}}i=s}return i}(l,t,r,n)}};e.exports=function(e,t){var r=function(e){if(!e)return s;if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?s.charset:e.charset;return{allowDots:void 0===e.allowDots?s.allowDots:!!e.allowDots,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:s.allowPrototypes,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:s.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:s.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:s.comma,decoder:"function"==typeof e.decoder?e.decoder:s.decoder,delimiter:"string"==typeof e.delimiter||n.isRegExp(e.delimiter)?e.delimiter:s.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:s.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:s.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:s.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:s.plainObjects,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:s.strictNullHandling}}(t);if(""===e||null==e)return r.plainObjects?Object.create(null):{};for(var f="string"==typeof e?function(e,t){var r,l={},f=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,h=t.parameterLimit===1/0?void 0:t.parameterLimit,d=f.split(t.delimiter,h),p=-1,m=t.charset;if(t.charsetSentinel)for(r=0;r<d.length;++r)0===d[r].indexOf("utf8=")&&("utf8=%E2%9C%93"===d[r]?m="utf-8":"utf8=%26%2310003%3B"===d[r]&&(m="iso-8859-1"),p=r,r=d.length);for(r=0;r<d.length;++r)if(r!==p){var g,v,y=d[r],b=y.indexOf("]="),x=-1===b?y.indexOf("="):b+1;-1===x?(g=t.decoder(y,s.decoder,m,"key"),v=t.strictNullHandling?null:""):(g=t.decoder(y.slice(0,x),s.decoder,m,"key"),v=u(o(y.slice(x+1),t),(function(e){return t.decoder(e,s.decoder,m,"value")}))),v&&t.interpretNumericEntities&&"iso-8859-1"===m&&(v=c(v)),y.indexOf("[]=")>-1&&(v=a(v)?[v]:v),i.call(l,g)?l[g]=n.combine(l[g],v):l[g]=v}return l}(e,r):e,h=r.plainObjects?Object.create(null):{},d=Object.keys(f),p=0;p<d.length;++p){var m=d[p],g=l(m,f[m],r,"string"==typeof e);h=n.merge(h,g,r)}return n.compact(h)}},function(e,t,r){"use strict";var n=r(29);function i(){}function a(){}a.resetWarningCache=i,e.exports=function(){function e(e,t,r,i,a,s){if(s!==n){var c=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw c.name="Invariant Violation",c}}function t(){return e}e.isRequired=e;var r={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:i};return r.PropTypes=r,r}},function(e,t,r){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,r){"use strict";var n=r(13),i=r(15),a=r(37),s=r(38),c=r(18),o=r(19),u=r(10),l=r(20);function f(e,t,r){"function"==typeof e.addAlgoliaAgent&&e.addAlgoliaAgent("JS Helper ("+l+")"),this.setClient(e);var i=r||{};i.index=t,this.state=n.make(i),this.lastResults=null,this._queryId=0,this._lastQueryIdReceived=-1,this.derivedHelpers=[],this._currentNbQueries=0}function h(e){if(e<0)throw new Error("Page requested below 0.");return this._change({state:this.state.setPage(e),isPageReset:!1}),this}function d(){return this.state.page}o(f,c.EventEmitter),f.prototype.search=function(){return this._search({onlyWithDerivedHelpers:!1}),this},f.prototype.searchOnlyWithDerivedHelpers=function(){return this._search({onlyWithDerivedHelpers:!0}),this},f.prototype.getQuery=function(){var e=this.state;return s._getHitsSearchParams(e)},f.prototype.searchOnce=function(e,t){var r=e?this.state.setQueryParameters(e):this.state,n=s._getQueries(r.index,r),a=this;if(this._currentNbQueries++,this.emit("searchOnce",{state:r}),!t)return this.client.search(n).then((function(e){return a._currentNbQueries--,0===a._currentNbQueries&&a.emit("searchQueueEmpty"),{content:new i(r,e.results),state:r,_originalResponse:e}}),(function(e){throw a._currentNbQueries--,0===a._currentNbQueries&&a.emit("searchQueueEmpty"),e}));this.client.search(n).then((function(e){a._currentNbQueries--,0===a._currentNbQueries&&a.emit("searchQueueEmpty"),t(null,new i(r,e.results),r)})).catch((function(e){a._currentNbQueries--,0===a._currentNbQueries&&a.emit("searchQueueEmpty"),t(e,null,r)}))},f.prototype.searchForFacetValues=function(e,t,r,n){var i="function"==typeof this.client.searchForFacetValues;if(!i&&"function"!=typeof this.client.initIndex)throw new Error("search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues");var a=this.state.setQueryParameters(n||{}),c=a.isDisjunctiveFacet(e),o=s.getSearchForFacetQuery(e,t,r,a);this._currentNbQueries++;var u=this;return this.emit("searchForFacetValues",{state:a,facet:e,query:t}),(i?this.client.searchForFacetValues([{indexName:a.index,params:o}]):this.client.initIndex(a.index).searchForFacetValues(o)).then((function(t){return u._currentNbQueries--,0===u._currentNbQueries&&u.emit("searchQueueEmpty"),(t=Array.isArray(t)?t[0]:t).facetHits.forEach((function(t){t.isRefined=c?a.isDisjunctiveFacetRefined(e,t.value):a.isFacetRefined(e,t.value)})),t}),(function(e){throw u._currentNbQueries--,0===u._currentNbQueries&&u.emit("searchQueueEmpty"),e}))},f.prototype.setQuery=function(e){return this._change({state:this.state.resetPage().setQuery(e),isPageReset:!0}),this},f.prototype.clearRefinements=function(e){return this._change({state:this.state.resetPage().clearRefinements(e),isPageReset:!0}),this},f.prototype.clearTags=function(){return this._change({state:this.state.resetPage().clearTags(),isPageReset:!0}),this},f.prototype.addDisjunctiveFacetRefinement=function(e,t){return this._change({state:this.state.resetPage().addDisjunctiveFacetRefinement(e,t),isPageReset:!0}),this},f.prototype.addDisjunctiveRefine=function(){return this.addDisjunctiveFacetRefinement.apply(this,arguments)},f.prototype.addHierarchicalFacetRefinement=function(e,t){return this._change({state:this.state.resetPage().addHierarchicalFacetRefinement(e,t),isPageReset:!0}),this},f.prototype.addNumericRefinement=function(e,t,r){return this._change({state:this.state.resetPage().addNumericRefinement(e,t,r),isPageReset:!0}),this},f.prototype.addFacetRefinement=function(e,t){return this._change({state:this.state.resetPage().addFacetRefinement(e,t),isPageReset:!0}),this},f.prototype.addRefine=function(){return this.addFacetRefinement.apply(this,arguments)},f.prototype.addFacetExclusion=function(e,t){return this._change({state:this.state.resetPage().addExcludeRefinement(e,t),isPageReset:!0}),this},f.prototype.addExclude=function(){return this.addFacetExclusion.apply(this,arguments)},f.prototype.addTag=function(e){return this._change({state:this.state.resetPage().addTagRefinement(e),isPageReset:!0}),this},f.prototype.removeNumericRefinement=function(e,t,r){return this._change({state:this.state.resetPage().removeNumericRefinement(e,t,r),isPageReset:!0}),this},f.prototype.removeDisjunctiveFacetRefinement=function(e,t){return this._change({state:this.state.resetPage().removeDisjunctiveFacetRefinement(e,t),isPageReset:!0}),this},f.prototype.removeDisjunctiveRefine=function(){return this.removeDisjunctiveFacetRefinement.apply(this,arguments)},f.prototype.removeHierarchicalFacetRefinement=function(e){return this._change({state:this.state.resetPage().removeHierarchicalFacetRefinement(e),isPageReset:!0}),this},f.prototype.removeFacetRefinement=function(e,t){return this._change({state:this.state.resetPage().removeFacetRefinement(e,t),isPageReset:!0}),this},f.prototype.removeRefine=function(){return this.removeFacetRefinement.apply(this,arguments)},f.prototype.removeFacetExclusion=function(e,t){return this._change({state:this.state.resetPage().removeExcludeRefinement(e,t),isPageReset:!0}),this},f.prototype.removeExclude=function(){return this.removeFacetExclusion.apply(this,arguments)},f.prototype.removeTag=function(e){return this._change({state:this.state.resetPage().removeTagRefinement(e),isPageReset:!0}),this},f.prototype.toggleFacetExclusion=function(e,t){return this._change({state:this.state.resetPage().toggleExcludeFacetRefinement(e,t),isPageReset:!0}),this},f.prototype.toggleExclude=function(){return this.toggleFacetExclusion.apply(this,arguments)},f.prototype.toggleRefinement=function(e,t){return this.toggleFacetRefinement(e,t)},f.prototype.toggleFacetRefinement=function(e,t){return this._change({state:this.state.resetPage().toggleFacetRefinement(e,t),isPageReset:!0}),this},f.prototype.toggleRefine=function(){return this.toggleFacetRefinement.apply(this,arguments)},f.prototype.toggleTag=function(e){return this._change({state:this.state.resetPage().toggleTagRefinement(e),isPageReset:!0}),this},f.prototype.nextPage=function(){var e=this.state.page||0;return this.setPage(e+1)},f.prototype.previousPage=function(){var e=this.state.page||0;return this.setPage(e-1)},f.prototype.setCurrentPage=h,f.prototype.setPage=h,f.prototype.setIndex=function(e){return this._change({state:this.state.resetPage().setIndex(e),isPageReset:!0}),this},f.prototype.setQueryParameter=function(e,t){return this._change({state:this.state.resetPage().setQueryParameter(e,t),isPageReset:!0}),this},f.prototype.setState=function(e){return this._change({state:n.make(e),isPageReset:!1}),this},f.prototype.overrideStateWithoutTriggeringChangeEvent=function(e){return this.state=new n(e),this},f.prototype.hasRefinements=function(e){return!!u(this.state.getNumericRefinements(e))||(this.state.isConjunctiveFacet(e)?this.state.isFacetRefined(e):this.state.isDisjunctiveFacet(e)?this.state.isDisjunctiveFacetRefined(e):!!this.state.isHierarchicalFacet(e)&&this.state.isHierarchicalFacetRefined(e))},f.prototype.isExcluded=function(e,t){return this.state.isExcludeRefined(e,t)},f.prototype.isDisjunctiveRefined=function(e,t){return this.state.isDisjunctiveFacetRefined(e,t)},f.prototype.hasTag=function(e){return this.state.isTagRefined(e)},f.prototype.isTagRefined=function(){return this.hasTagRefinements.apply(this,arguments)},f.prototype.getIndex=function(){return this.state.index},f.prototype.getCurrentPage=d,f.prototype.getPage=d,f.prototype.getTags=function(){return this.state.tagRefinements},f.prototype.getRefinements=function(e){var t=[];if(this.state.isConjunctiveFacet(e))this.state.getConjunctiveRefinements(e).forEach((function(e){t.push({value:e,type:"conjunctive"})})),this.state.getExcludeRefinements(e).forEach((function(e){t.push({value:e,type:"exclude"})}));else if(this.state.isDisjunctiveFacet(e)){this.state.getDisjunctiveRefinements(e).forEach((function(e){t.push({value:e,type:"disjunctive"})}))}var r=this.state.getNumericRefinements(e);return Object.keys(r).forEach((function(e){var n=r[e];t.push({value:n,operator:e,type:"numeric"})})),t},f.prototype.getNumericRefinement=function(e,t){return this.state.getNumericRefinement(e,t)},f.prototype.getHierarchicalFacetBreadcrumb=function(e){return this.state.getHierarchicalFacetBreadcrumb(e)},f.prototype._search=function(e){var t=this.state,r=[],n=[];e.onlyWithDerivedHelpers||(n=s._getQueries(t.index,t),r.push({state:t,queriesCount:n.length,helper:this}),this.emit("search",{state:t,results:this.lastResults}));var i=this.derivedHelpers.map((function(e){var n=e.getModifiedState(t),i=s._getQueries(n.index,n);return r.push({state:n,queriesCount:i.length,helper:e}),e.emit("search",{state:n,results:e.lastResults}),i})),a=Array.prototype.concat.apply(n,i),c=this._queryId++;this._currentNbQueries++;try{this.client.search(a).then(this._dispatchAlgoliaResponse.bind(this,r,c)).catch(this._dispatchAlgoliaError.bind(this,c))}catch(e){this.emit("error",{error:e})}},f.prototype._dispatchAlgoliaResponse=function(e,t,r){if(!(t<this._lastQueryIdReceived)){this._currentNbQueries-=t-this._lastQueryIdReceived,this._lastQueryIdReceived=t,0===this._currentNbQueries&&this.emit("searchQueueEmpty");var n=r.results.slice();e.forEach((function(e){var t=e.state,r=e.queriesCount,a=e.helper,s=n.splice(0,r),c=a.lastResults=new i(t,s);a.emit("result",{results:c,state:t})}))}},f.prototype._dispatchAlgoliaError=function(e,t){e<this._lastQueryIdReceived||(this._currentNbQueries-=e-this._lastQueryIdReceived,this._lastQueryIdReceived=e,this.emit("error",{error:t}),0===this._currentNbQueries&&this.emit("searchQueueEmpty"))},f.prototype.containsRefinement=function(e,t,r,n){return e||0!==t.length||0!==r.length||0!==n.length},f.prototype._hasDisjunctiveRefinements=function(e){return this.state.disjunctiveRefinements[e]&&this.state.disjunctiveRefinements[e].length>0},f.prototype._change=function(e){var t=e.state,r=e.isPageReset;t!==this.state&&(this.state=t,this.emit("change",{state:this.state,results:this.lastResults,isPageReset:r}))},f.prototype.clearCache=function(){return this.client.clearCache&&this.client.clearCache(),this},f.prototype.setClient=function(e){return this.client===e||("function"==typeof e.addAlgoliaAgent&&e.addAlgoliaAgent("JS Helper ("+l+")"),this.client=e),this},f.prototype.getClient=function(){return this.client},f.prototype.derive=function(e){var t=new a(this,e);return this.derivedHelpers.push(t),t},f.prototype.detachDerivedHelper=function(e){var t=this.derivedHelpers.indexOf(e);if(-1===t)throw new Error("Derived helper already detached");this.derivedHelpers.splice(t,1)},f.prototype.hasPendingRequests=function(){return this._currentNbQueries>0},e.exports=f},function(e,t,r){"use strict";e.exports=function(e,t){return e.filter((function(r,n){return t.indexOf(r)>-1&&e.indexOf(r)===n}))}},function(e,t,r){"use strict";e.exports=function e(t){if("number"==typeof t)return t;if("string"==typeof t)return parseFloat(t);if(Array.isArray(t))return t.map(e);throw new Error("The value should be a number, a parsable string or an array of those.")}},function(e,t,r){"use strict";var n=r(9),i=r(14),a=r(10),s={addRefinement:function(e,t,r){if(s.isRefined(e,t,r))return e;var i=""+r,a=e[t]?e[t].concat(i):[i],c={};return c[t]=a,n({},c,e)},removeRefinement:function(e,t,r){if(void 0===r)return s.clearRefinement(e,(function(e,r){return t===r}));var n=""+r;return s.clearRefinement(e,(function(e,r){return t===r&&n===e}))},toggleRefinement:function(e,t,r){if(void 0===r)throw new Error("toggleRefinement should be used with a value");return s.isRefined(e,t,r)?s.removeRefinement(e,t,r):s.addRefinement(e,t,r)},clearRefinement:function(e,t,r){if(void 0===t)return a(e)?{}:e;if("string"==typeof t)return i(e,[t]);if("function"==typeof t){var n=!1,s=Object.keys(e).reduce((function(i,a){var s=e[a]||[],c=s.filter((function(e){return!t(e,a,r)}));return c.length!==s.length&&(n=!0),i[a]=c,i}),{});return n?s:e}},isRefined:function(e,t,r){var n=!!e[t]&&e[t].length>0;if(void 0===r||!n)return n;var i=""+r;return-1!==e[t].indexOf(i)}};e.exports=s},function(e,t,r){"use strict";e.exports=function(e){return Array.isArray(e)?e.filter(Boolean):[]}},function(e,t,r){"use strict";e.exports=function(e,t){if(!Array.isArray(e))return-1;for(var r=0;r<e.length;r++)if(t(e[r]))return r;return-1}},function(e,t,r){"use strict";e.exports=function(e){return function(t,r){var s=e.hierarchicalFacets[r],c=e.hierarchicalFacetsRefinements[s.name]&&e.hierarchicalFacetsRefinements[s.name][0]||"",o=e._getHierarchicalFacetSeparator(s),u=e._getHierarchicalRootPath(s),l=e._getHierarchicalShowParentLevel(s),f=a(e._getHierarchicalFacetSortBy(s)),h=t.every((function(e){return e.exhaustive})),d=function(e,t,r,a,s){return function(c,o,u){var l=c;if(u>0){var f=0;for(l=c;f<u;){var h=l&&Array.isArray(l.data)?l.data:[];l=i(h,(function(e){return e.isRefined})),f++}}if(l){var d=Object.keys(o.data).map((function(e){return[e,o.data[e]]})).filter((function(e){return function(e,t,r,n,i,a){if(i&&(0!==e.indexOf(i)||i===e))return!1;return!i&&-1===e.indexOf(n)||i&&e.split(n).length-i.split(n).length==1||-1===e.indexOf(n)&&-1===r.indexOf(n)||0===r.indexOf(e)||0===e.indexOf(t+n)&&(a||0===e.indexOf(r))}(e[0],l.path||r,s,t,r,a)}));l.data=n(d.map((function(e){var r=e[0];return function(e,t,r,n,i){var a=t.split(r);return{name:a[a.length-1].trim(),path:t,count:e,isRefined:n===t||0===n.indexOf(t+r),exhaustive:i,data:null}}(e[1],r,t,s,o.exhaustive)})),e[0],e[1])}return c}}(f,o,u,l,c),p=t;return u&&(p=t.slice(u.split(o).length)),p.reduce(d,{name:e.hierarchicalFacets[r].name,count:null,isRefined:!0,path:null,exhaustive:h,data:null})}};var n=r(16),i=r(4),a=r(17)},function(e,t,r){"use strict";var n=r(18);function i(e,t){this.main=e,this.fn=t,this.lastResults=null}r(19)(i,n.EventEmitter),i.prototype.detach=function(){this.removeAllListeners(),this.main.detachDerivedHelper(this)},i.prototype.getModifiedState=function(e){return this.fn(e)},e.exports=i},function(e,t,r){"use strict";var n=r(8),i={_getQueries:function(e,t){var r=[];return r.push({indexName:e,params:i._getHitsSearchParams(t)}),t.getRefinedDisjunctiveFacets().forEach((function(n){r.push({indexName:e,params:i._getDisjunctiveFacetSearchParams(t,n)})})),t.getRefinedHierarchicalFacets().forEach((function(n){var a=t.getHierarchicalFacetByName(n),s=t.getHierarchicalRefinement(n),c=t._getHierarchicalFacetSeparator(a);s.length>0&&s[0].split(c).length>1&&r.push({indexName:e,params:i._getDisjunctiveFacetSearchParams(t,n,!0)})})),r},_getHitsSearchParams:function(e){var t=e.facets.concat(e.disjunctiveFacets).concat(i._getHitsHierarchicalFacetsAttributes(e)),r=i._getFacetFilters(e),a=i._getNumericFilters(e),s={facets:t,tagFilters:i._getTagFilters(e)};return r.length>0&&(s.facetFilters=r),a.length>0&&(s.numericFilters=a),n({},e.getQueryParams(),s)},_getDisjunctiveFacetSearchParams:function(e,t,r){var a=i._getFacetFilters(e,t,r),s=i._getNumericFilters(e,t),c={hitsPerPage:1,page:0,attributesToRetrieve:[],attributesToHighlight:[],attributesToSnippet:[],tagFilters:i._getTagFilters(e),analytics:!1,clickAnalytics:!1},o=e.getHierarchicalFacetByName(t);return c.facets=o?i._getDisjunctiveHierarchicalFacetAttribute(e,o,r):t,s.length>0&&(c.numericFilters=s),a.length>0&&(c.facetFilters=a),n({},e.getQueryParams(),c)},_getNumericFilters:function(e,t){if(e.numericFilters)return e.numericFilters;var r=[];return Object.keys(e.numericRefinements).forEach((function(n){var i=e.numericRefinements[n]||{};Object.keys(i).forEach((function(e){var a=i[e]||[];t!==n&&a.forEach((function(t){if(Array.isArray(t)){var i=t.map((function(t){return n+e+t}));r.push(i)}else r.push(n+e+t)}))}))})),r},_getTagFilters:function(e){return e.tagFilters?e.tagFilters:e.tagRefinements.join(",")},_getFacetFilters:function(e,t,r){var n=[],i=e.facetsRefinements||{};Object.keys(i).forEach((function(e){(i[e]||[]).forEach((function(t){n.push(e+":"+t)}))}));var a=e.facetsExcludes||{};Object.keys(a).forEach((function(e){(a[e]||[]).forEach((function(t){n.push(e+":-"+t)}))}));var s=e.disjunctiveFacetsRefinements||{};Object.keys(s).forEach((function(e){var r=s[e]||[];if(e!==t&&r&&0!==r.length){var i=[];r.forEach((function(t){i.push(e+":"+t)})),n.push(i)}}));var c=e.hierarchicalFacetsRefinements||{};return Object.keys(c).forEach((function(i){var a=(c[i]||[])[0];if(void 0!==a){var s,o,u=e.getHierarchicalFacetByName(i),l=e._getHierarchicalFacetSeparator(u),f=e._getHierarchicalRootPath(u);if(t===i){if(-1===a.indexOf(l)||!f&&!0===r||f&&f.split(l).length===a.split(l).length)return;f?(o=f.split(l).length-1,a=f):(o=a.split(l).length-2,a=a.slice(0,a.lastIndexOf(l))),s=u.attributes[o]}else o=a.split(l).length-1,s=u.attributes[o];s&&n.push([s+":"+a])}})),n},_getHitsHierarchicalFacetsAttributes:function(e){return e.hierarchicalFacets.reduce((function(t,r){var n=e.getHierarchicalRefinement(r.name)[0];if(!n)return t.push(r.attributes[0]),t;var i=e._getHierarchicalFacetSeparator(r),a=n.split(i).length,s=r.attributes.slice(0,a+1);return t.concat(s)}),[])},_getDisjunctiveHierarchicalFacetAttribute:function(e,t,r){var n=e._getHierarchicalFacetSeparator(t);if(!0===r){var i=e._getHierarchicalRootPath(t),a=0;return i&&(a=i.split(n).length),[t.attributes[a]]}var s=(e.getHierarchicalRefinement(t.name)[0]||"").split(n).length-1;return t.attributes.slice(0,s+1)},getSearchForFacetQuery:function(e,t,r,a){var s=a.isDisjunctiveFacet(e)?a.clearRefinements(e):a,c={facetQuery:t,facetName:e};return"number"==typeof r&&(c.maxFacetHits=r),n({},i._getHitsSearchParams(s),c)}};e.exports=i},,function(e,t,r){"use strict";r.r(t);var n=r(0),i=r.n(n),a=r(21),s=r.n(a),c=r(11),o=r.n(c);function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}function f(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function h(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){f(e,t,r[t])}))}return e}function d(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function p(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function m(e,t,r){return t&&p(e.prototype,t),r&&p(e,r),e}function g(e){return(g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function v(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function y(e,t){return!t||"object"!==g(t)&&"function"!=typeof t?v(e):t}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function x(e,t){return(x=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function R(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&x(e,t)}var F=r(5),S=r.n(F),P=function(e,t){if(e===t)return!0;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(var i=Object.prototype.hasOwnProperty,a=0;a<r.length;a++)if(!i.call(t,r[a])||e[r[a]]!==t[r[a]])return!1;return!0},j=Promise.resolve(),O=function e(t){return Object.keys(t).forEach((function(r){var n,i=t[r];(function(e){return"object"===g(e)&&null!==e&&!Array.isArray(e)})(i)&&((n=i)&&Object.keys(n).length>0?e(i):delete t[r])})),t};function w(e,t){if(null==e)return{};for(var r={},n=Object.keys(e),i=0;i<n.length;i++){var a=n[i];t.indexOf(a)>=0||(r[a]=e[a])}return r}var E=Object(n.createContext)({onInternalStateUpdate:function(){},createHrefForState:function(){return"#"},onSearchForFacetValues:function(){},onSearchStateChange:function(){},onSearchParameters:function(){},store:{},widgetsManager:{},mainTargetedIndex:""}),_=E.Consumer,C=E.Provider,N=Object(n.createContext)(void 0),A=N.Consumer;N.Provider;var k=function(e){return function(t){var r=function(e){if(!e.displayName)throw new Error("`createConnector` requires you to provide a `displayName` property.");var t="function"==typeof e.getSearchParameters||"function"==typeof e.getMetadata||"function"==typeof e.transitionState;return function(r){var a,s=function(n){function a(t){var r;return d(this,a),f(v(r=y(this,b(a).call(this,t))),"unsubscribe",void 0),f(v(r),"unregisterWidget",void 0),f(v(r),"isUnmounting",!1),f(v(r),"state",{providedProps:r.getProvidedProps(r.props)}),f(v(r),"refine",(function(){for(var t,n=arguments.length,i=new Array(n),a=0;a<n;a++)i[a]=arguments[a];r.props.contextValue.onInternalStateUpdate((t=e.refine).call.apply(t,[v(r),r.props,r.props.contextValue.store.getState().widgets].concat(i)))})),f(v(r),"createURL",(function(){for(var t,n=arguments.length,i=new Array(n),a=0;a<n;a++)i[a]=arguments[a];return r.props.contextValue.createHrefForState((t=e.refine).call.apply(t,[v(r),r.props,r.props.contextValue.store.getState().widgets].concat(i)))})),f(v(r),"searchForFacetValues",(function(){for(var t,n=arguments.length,i=new Array(n),a=0;a<n;a++)i[a]=arguments[a];r.props.contextValue.onSearchForFacetValues((t=e.searchForFacetValues).call.apply(t,[v(r),r.props,r.props.contextValue.store.getState().widgets].concat(i)))})),e.getSearchParameters&&r.props.contextValue.onSearchParameters(e.getSearchParameters.bind(v(r)),{ais:r.props.contextValue,multiIndexContext:r.props.indexContextValue},r.props),r}return R(a,n),m(a,[{key:"componentDidMount",value:function(){var e=this;this.unsubscribe=this.props.contextValue.store.subscribe((function(){e.isUnmounting||e.setState({providedProps:e.getProvidedProps(e.props)})})),t&&(this.unregisterWidget=this.props.contextValue.widgetsManager.registerWidget(this))}},{key:"shouldComponentUpdate",value:function(t,r){if("function"==typeof e.shouldComponentUpdate)return e.shouldComponentUpdate.call(this,this.props,t,this.state,r);var n=P(this.props,t);return null===this.state.providedProps||null===r.providedProps?this.state.providedProps!==r.providedProps||!n:!n||!P(this.state.providedProps,r.providedProps)}},{key:"componentDidUpdate",value:function(r){S()(r,this.props)||(this.setState({providedProps:this.getProvidedProps(this.props)}),t&&(this.props.contextValue.widgetsManager.update(),"function"==typeof e.transitionState&&this.props.contextValue.onSearchStateChange(e.transitionState.call(this,this.props,this.props.contextValue.store.getState().widgets,this.props.contextValue.store.getState().widgets))))}},{key:"componentWillUnmount",value:function(){if(this.isUnmounting=!0,this.unsubscribe&&this.unsubscribe(),this.unregisterWidget&&(this.unregisterWidget(),"function"==typeof e.cleanUp)){var t=e.cleanUp.call(this,this.props,this.props.contextValue.store.getState().widgets);this.props.contextValue.store.setState(h({},this.props.contextValue.store.getState(),{widgets:t})),this.props.contextValue.onSearchStateChange(O(t))}}},{key:"getProvidedProps",value:function(t){var r=this.props.contextValue.store.getState(),n=r.widgets,i=r.results,a=r.resultsFacetValues,s=r.searching,c=r.searchingForFacetValues,o=r.isSearchStalled,u=r.metadata,l={results:i,searching:s,searchingForFacetValues:c,isSearchStalled:o,error:r.error};return e.getProvidedProps.call(this,t,n,l,u,a)}},{key:"getSearchParameters",value:function(t){return"function"==typeof e.getSearchParameters?e.getSearchParameters.call(this,t,this.props,this.props.contextValue.store.getState().widgets):null}},{key:"getMetadata",value:function(t){return"function"==typeof e.getMetadata?e.getMetadata.call(this,this.props,t):{}}},{key:"transitionState",value:function(t,r){return"function"==typeof e.transitionState?e.transitionState.call(this,this.props,t,r):r}},{key:"render",value:function(){var t=this.props,n=(t.contextValue,l(t,["contextValue"])),a=this.state.providedProps;if(null===a)return null;var s="function"==typeof e.refine?{refine:this.refine,createURL:this.createURL}:{},c="function"==typeof e.searchForFacetValues?{searchForItems:this.searchForFacetValues}:{};return i.a.createElement(r,u({},n,a,s,c))}}]),a}(n.Component);return f(s,"displayName","".concat(e.displayName,"(").concat((a=r).displayName||a.name||"UnknownComponent",")")),f(s,"propTypes",e.propTypes),f(s,"defaultProps",e.defaultProps),s}}(e)(t);return function(e){return i.a.createElement(_,null,(function(t){return i.a.createElement(A,null,(function(n){return i.a.createElement(r,u({contextValue:t,indexContextValue:n},e))}))}))}}};function T(e){return H(e)?e.multiIndexContext.targetedIndex:e.ais.mainTargetedIndex}function V(e,t){if(e.results){if(e.results.hits)return e.results;var r=T(t);if(e.results[r])return e.results[r]}return null}function H(e){return e&&e.multiIndexContext}function I(e,t,r,n,i){if(H(r)){var a=T(r);return i?function(e,t,r,n,i){var a,s=n?{page:1}:void 0,c=e.indices&&e.indices[r]?h({},e.indices,f({},r,h({},e.indices[r],(f(a={},i,h({},e.indices[r][i],t)),f(a,"page",1),a)))):h({},e.indices,f({},r,h(f({},i,t),s)));return h({},e,{indices:c})}(e,t,a,n,i):function(e,t,r,n){var i=n?{page:1}:void 0,a=e.indices&&e.indices[r]?h({},e.indices,f({},r,h({},e.indices[r],t,i))):h({},e.indices,f({},r,h({},t,i)));return h({},e,{indices:a})}(e,t,a,n)}return e.indices&&n&&Object.keys(e.indices).forEach((function(t){e=I(e,{page:1},{multiIndexContext:{targetedIndex:t}},!0,i)})),i?function(e,t,r,n){var i=r?{page:1}:void 0;return h({},e,f({},n,h({},e[n],t)),i)}(e,t,n,i):function(e,t,r){var n=r?{page:1}:void 0;return h({},e,t,n)}(e,t,n)}function D(e){var t=e.match(/^([^.]*)\.(.*)/);return{namespace:t&&t[1],attributeName:t&&t[2]}}function Q(e,t,r,n,i){var a=T(r),s=D(n),c=s.namespace,o=s.attributeName,u={multiIndex:H(r),indexId:a,namespace:c,attributeName:o,id:n,searchState:t};return function(e){var t=e.multiIndex,r=e.indexId,n=e.namespace,i=e.attributeName,a=e.id,s=e.searchState;return t&&n?s.indices&&s.indices[r]&&s.indices[r][n]&&Object.hasOwnProperty.call(s.indices[r][n],i):t?s.indices&&s.indices[r]&&Object.hasOwnProperty.call(s.indices[r],a):n?s[n]&&Object.hasOwnProperty.call(s[n],i):Object.hasOwnProperty.call(s,a)}(u)?function(e){var t=e.multiIndex,r=e.indexId,n=e.namespace,i=e.attributeName,a=e.id,s=e.searchState;return t&&n?s.indices[r][n][i]:t?s.indices[r][a]:n?s[n][i]:s[a]}(u):e.defaultRefinement?e.defaultRefinement:i}function q(e,t,r){var n=T(t),i=D(r),a=i.namespace,s=i.attributeName;return H(t)&&Boolean(e.indices)?function(e){var t=e.searchState,r=e.indexId,n=e.id,i=e.namespace,a=e.attribute,s=t.indices[r];if(i&&s)return h({},t,{indices:h({},t.indices,f({},r,h({},s,f({},i,w(s[i],[a])))))});if(s)return h({},t,{indices:h({},t.indices,f({},r,w(s,[n])))});return t}({attribute:s,searchState:e,indexId:n,id:r,namespace:a}):function(e){var t=e.searchState,r=e.id,n=e.namespace,i=e.attribute;if(n)return h({},t,f({},n,w(t[n],[i])));return w(t,[r])}({attribute:s,searchState:e,id:r,namespace:a})}var L=k({displayName:"AlgoliaStateResults",getProvidedProps:function(e,t,r){return{searchState:t,searchResults:V(r,{ais:e.contextValue,multiIndexContext:e.indexContextValue}),allSearchResults:r.results,searching:r.searching,isSearchStalled:r.isSearchStalled,error:r.error,searchingForFacetValues:r.searchingForFacetValues,props:e}}}),M={highlightPreTag:"<ais-highlight-0000000000>",highlightPostTag:"</ais-highlight-0000000000>"};function U(e){var t=e.preTag,r=e.postTag,n=e.highlightedValue,i=(void 0===n?"":n).split(t),a=i.shift(),s=""===a?[]:[{value:a,isHighlighted:!1}];if(r===t){var c=!0;i.forEach((function(e){s.push({value:e,isHighlighted:c}),c=!c}))}else i.forEach((function(e){var t=e.split(r);s.push({value:t[0],isHighlighted:!0}),""!==t[1]&&s.push({value:t[1],isHighlighted:!1})}));return s}function B(e){var t=e.preTag,r=void 0===t?"<em>":t,n=e.postTag,i=void 0===n?"</em>":n,a=e.highlightProperty,s=e.attribute,c=e.hit;if(!c)throw new Error("`hit`, the matching record, must be provided");var o,u,l=(o=c[a],u=s,(Array.isArray(u)?u:u.replace(/\[(\d+)]/g,".$1").split(".")).reduce((function(e,t){return e?e[t]:void 0}),o)||{});return Array.isArray(l)?l.map((function(e){return U({preTag:r,postTag:i,highlightedValue:e.value})})):U({preTag:r,postTag:i,highlightedValue:l.value})}var W=function(e){var t=e.attribute,r=e.hit,n=e.highlightProperty,i=e.preTag,a=void 0===i?M.highlightPreTag:i,s=e.postTag;return B({attribute:t,highlightProperty:n,hit:r,preTag:a,postTag:void 0===s?M.highlightPostTag:s})},$=k({displayName:"AlgoliaHighlighter",propTypes:{},getProvidedProps:function(){return{highlight:W}}});r(3);r(22);var J=r(6),z=r.n(J),K=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"ais";return function(){for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];var a=n.filter((function(e){return e||""===e})).map((function(r){var n="".concat(t,"-").concat(e);return r?"".concat(n,"-").concat(r):n}));return z()(a)}};var Y=r(1),G=r.n(Y),X=function(e){var t=e.cx,r=e.value,n=e.highlightedTagName,a=e.isHighlighted,s=e.nonHighlightedTagName,c=a?n:s,o=a?"highlighted":"nonHighlighted";return i.a.createElement(c,{className:t(o)},r)};X.propTypes={cx:G.a.func.isRequired,value:G.a.string.isRequired,isHighlighted:G.a.bool.isRequired,highlightedTagName:G.a.string.isRequired,nonHighlightedTagName:G.a.string.isRequired};var Z=function(e){var t=e.cx,r=e.hit,n=e.attribute,a=e.highlight,s=e.highlightProperty,c=e.tagName,o=e.nonHighlightedTagName,u=e.separator,l=e.className,f=a({hit:r,attribute:n,highlightProperty:s});return i.a.createElement("span",{className:z()(t(""),l)},f.map((function(e,r){if(Array.isArray(e)){var n=r===f.length-1;return i.a.createElement("span",{key:r},e.map((function(e,r){return i.a.createElement(X,{cx:t,key:r,value:e.value,highlightedTagName:c,nonHighlightedTagName:o,isHighlighted:e.isHighlighted})})),!n&&i.a.createElement("span",{className:t("separator")},u))}return i.a.createElement(X,{cx:t,key:r,value:e.value,highlightedTagName:c,nonHighlightedTagName:o,isHighlighted:e.isHighlighted})})))};Z.propTypes={cx:G.a.func.isRequired,hit:G.a.object.isRequired,attribute:G.a.oneOfType([G.a.arrayOf(G.a.string),G.a.string]).isRequired,highlight:G.a.func.isRequired,highlightProperty:G.a.string.isRequired,tagName:G.a.string,nonHighlightedTagName:G.a.string,className:G.a.string,separator:G.a.node},Z.defaultProps={tagName:"em",nonHighlightedTagName:"span",className:"",separator:", "};var ee=Z,te=K("Snippet"),re=$((function(e){return i.a.createElement(ee,u({},e,{highlightProperty:"_snippetResult",cx:te}))}));function ne(e,t,r){var n=Q(e,t,r,"query","");return n||""}function ie(e,t,r,n){return I(t,f({},"query",r),n,!0)}var ae=k({displayName:"AlgoliaSearchBox",propTypes:{defaultRefinement:G.a.string},getProvidedProps:function(e,t,r){return{currentRefinement:ne(e,t,{ais:e.contextValue,multiIndexContext:e.indexContextValue}),isSearchStalled:r.isSearchStalled}},refine:function(e,t,r){return ie(0,t,r,{ais:e.contextValue,multiIndexContext:e.indexContextValue})},cleanUp:function(e,t){return function(e,t,r){return q(t,r,"query")}(0,t,{ais:e.contextValue,multiIndexContext:e.indexContextValue})},getSearchParameters:function(e,t,r){return e.setQuery(ne(t,r,{ais:t.contextValue,multiIndexContext:t.indexContextValue}))},getMetadata:function(e,t){var r=ne(e,t,{ais:e.contextValue,multiIndexContext:e.indexContextValue});return{id:"query",index:T({ais:e.contextValue,multiIndexContext:e.indexContextValue}),items:null===r?[]:[{label:"".concat("query",": ").concat(r),value:function(t){return ie(0,t,"",{ais:e.contextValue,multiIndexContext:e.indexContextValue})},currentRefinement:r}]}}}),se=k({displayName:"AlgoliaHits",getProvidedProps:function(e,t,r){var n,i,a,s=V(r,{ais:e.contextValue,multiIndexContext:e.indexContextValue});return s?{hits:function(e,t){return t?e.map((function(e){return h({},e,{__queryID:t})})):e}((n=s.hits,i=s.hitsPerPage,a=s.page,n.map((function(e,t){return h({},e,{__position:i*a+t+1})}))),s.queryID)}:{hits:[]}},getSearchParameters:function(e){return e}});function ce(e,t,r){var n=Q(e,t,r,"page",1);return"string"==typeof n?parseInt(n,10):n}var oe=k({displayName:"AlgoliaPagination",getProvidedProps:function(e,t,r){var n=V(r,{ais:e.contextValue,multiIndexContext:e.indexContextValue});if(!n)return null;var i=n.nbPages;return{nbPages:i,currentRefinement:ce(e,t,{ais:e.contextValue,multiIndexContext:e.indexContextValue}),canRefine:i>1}},refine:function(e,t,r){return function(e,t,r,n){return I(t,f({},"page",r),n,!1)}(0,t,r,{ais:e.contextValue,multiIndexContext:e.indexContextValue})},cleanUp:function(e,t){return q(t,{ais:e.contextValue,multiIndexContext:e.indexContextValue},"page")},getSearchParameters:function(e,t,r){return e.setPage(ce(t,r,{ais:t.contextValue,multiIndexContext:t.indexContextValue})-1)},getMetadata:function(){return{id:"page"}}});function ue(e){return e.attribute}function le(e,t,r){var n=Q(e,t,r,"".concat("menu",".").concat(ue(e)),null);return""===n?null:n}function fe(e,t,r,n){return e===le(t,r,n)?"":e}function he(e){var t=e.showMore,r=e.limit,n=e.showMoreLimit;return t?n:r}function de(e,t,r,n){return I(t,f({},ue(e),r||""),n,!0,"menu")}var pe=["count:desc","name:asc"],me=k({displayName:"AlgoliaMenu",propTypes:{attribute:G.a.string.isRequired,showMore:G.a.bool,limit:G.a.number,showMoreLimit:G.a.number,defaultRefinement:G.a.string,transformItems:G.a.func,searchable:G.a.bool},defaultProps:{showMore:!1,limit:10,showMoreLimit:20},getProvidedProps:function(e,t,r,n,i){var a,s=e.attribute,c=e.searchable,o=e.indexContextValue,u=V(r,{ais:e.contextValue,multiIndexContext:e.indexContextValue}),l=Boolean(u)&&Boolean(u.getFacetByName(s)),f=Boolean(i&&i[s]&&""!==i.query);if(c&&o)throw new Error("react-instantsearch: searching in *List is not available when used inside a multi index context");if(!l)return{items:[],currentRefinement:le(e,t,{ais:e.contextValue,multiIndexContext:e.indexContextValue}),isFromSearch:f,searchable:c,canRefine:l};a=f?i[s].map((function(r){return{label:r.value,value:fe(r.value,e,t,{ais:e.contextValue,multiIndexContext:e.indexContextValue}),_highlightResult:{label:{value:r.highlighted}},count:r.count,isRefined:r.isRefined}})):u.getFacetValues(s,{sortBy:c?void 0:pe}).map((function(r){return{label:r.name,value:fe(r.name,e,t,{ais:e.contextValue,multiIndexContext:e.indexContextValue}),count:r.count,isRefined:r.isRefined}}));var h=e.transformItems?e.transformItems(a):a;return{items:h.slice(0,he(e)),currentRefinement:le(e,t,{ais:e.contextValue,multiIndexContext:e.indexContextValue}),isFromSearch:f,searchable:c,canRefine:h.length>0}},refine:function(e,t,r){return de(e,t,r,{ais:e.contextValue,multiIndexContext:e.indexContextValue})},searchForFacetValues:function(e,t,r){return{facetName:e.attribute,query:r,maxFacetHits:he(e)}},cleanUp:function(e,t){return function(e,t,r){return q(t,r,"".concat("menu",".").concat(ue(e)))}(e,t,{ais:e.contextValue,multiIndexContext:e.indexContextValue})},getSearchParameters:function(e,t,r){var n=t.attribute;e=(e=e.setQueryParameters({maxValuesPerFacet:Math.max(e.maxValuesPerFacet||0,he(t))})).addDisjunctiveFacet(n);var i=le(t,r,{ais:t.contextValue,multiIndexContext:t.indexContextValue});return null!==i&&(e=e.addDisjunctiveFacetRefinement(n,i)),e},getMetadata:function(e,t){var r=ue(e),n=le(e,t,{ais:e.contextValue,multiIndexContext:e.indexContextValue});return{id:r,index:T({ais:e.contextValue,multiIndexContext:e.indexContextValue}),items:null===n?[]:[{label:"".concat(e.attribute,": ").concat(n),attribute:e.attribute,value:function(t){return de(e,t,"",{ais:e.contextValue,multiIndexContext:e.indexContextValue})},currentRefinement:n}]}}}),ge=r(2),ve=r.n(ge);function ye(e){var t=[],r=!1;function n(){var t;r||(r=!0,t=function(){r=!1,e()},j.then(t))}return{registerWidget:function(e){return t.push(e),n(),function(){t.splice(t.indexOf(e),1),n()}},update:n,getWidgets:function(){return t}}}function be(e){"function"==typeof e.addAlgoliaAgent&&(e.addAlgoliaAgent("react (".concat(n.version,")")),e.addAlgoliaAgent("react-instantsearch (".concat("6.4.0",")")))}var xe=function(e){return H({ais:e.props.contextValue,multiIndexContext:e.props.indexContextValue})},Re=function(e,t){return e.props.indexContextValue.targetedIndex===t},Fe=function(e){return Boolean(e.props.indexId)},Se=function(e,t){return e.props.indexId===t},Pe=function(e,t){return Fe(e)?-1:Fe(t)?1:0};function je(e){return Object.keys(e).map((function(t){return function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];var i=0;return e.replace(/%s/g,(function(){return encodeURIComponent(r[i++])}))}("%s=%s",t,(r=e[t],"[object Object]"===Object.prototype.toString.call(r)||"[object Array]"===Object.prototype.toString.call(r)?JSON.stringify(e[t]):e[t]));var r})).join("&")}function Oe(e){var t=e.indexName,r=e.initialState,n=void 0===r?{}:r,i=e.searchClient,a=e.resultsState,s=e.stalledSearchDelay,c=ve()(i,t,h({},M));be(i),c.on("search",(function(){u||(u=setTimeout((function(){var e=m.getState(),t=(e.resultsFacetValues,l(e,["resultsFacetValues"]));m.setState(h({},t,{isSearchStalled:!0}))}),s))})).on("result",b({indexId:t})).on("error",x);var o=!1,u=null,d=c.state,p=ye((function(){var e=g(m.getState().widgets);m.setState(h({},m.getState(),{metadata:e,searching:!0})),y()}));!function(e,t){if(!t)return;if(!(e.transporter||e._useCache&&"function"==typeof e.addAlgoliaAgent))return;if(e.transporter){var r=e.search;e.search=function(t){for(var n=arguments.length,i=new Array(n>1?n-1:0),a=1;a<n;a++)i[a-1]=arguments[a];var s=t.map((function(e){return h({},e,{params:je(e.params)})}));return e.transporter.responsesCache.get({method:"search",args:[s].concat(i)},(function(){return r.apply(void 0,[t].concat(i))}))}}if(Array.isArray(t))return void function(e,t){if(e.transporter)return void e.transporter.responsesCache.set({method:"search",args:[t.reduce((function(e,t){return e.concat(t.rawResults.map((function(e){return{indexName:e.index,params:e.params}})))}),[])]},{results:t.reduce((function(e,t){return e.concat(t.rawResults)}),[])});var r="/1/indexes/*/queries_body_".concat(JSON.stringify({requests:t.reduce((function(e,t){return e.concat(t.rawResults.map((function(e){return{indexName:e.index,params:e.params}})))}),[])}));e.cache=h({},e.cache,f({},r,JSON.stringify({results:t.reduce((function(e,t){return e.concat(t.rawResults)}),[])})))}(e,t);!function(e,t){if(e.transporter)return void e.transporter.responsesCache.set({method:"search",args:[t.rawResults.map((function(e){return{indexName:e.index,params:e.params}}))]},{results:t.rawResults});var r="/1/indexes/*/queries_body_".concat(JSON.stringify({requests:t.rawResults.map((function(e){return{indexName:e.index,params:e.params}}))}));e.cache=h({},e.cache,f({},r,JSON.stringify({results:t.rawResults})))}(e,t)}(i,a);var m=function(e){var t=e,r=[];return{getState:function(){return t},setState:function(e){t=e,r.forEach((function(e){return e()}))},subscribe:function(e){return r.push(e),function(){r.splice(r.indexOf(e),1)}}}}({widgets:n,metadata:[],results:function(e){if(!e)return null;if(Array.isArray(e))return e.reduce((function(e,t){return h({},e,f({},t._internalIndexId,new ve.a.SearchResults(new ve.a.SearchParameters(t.state),t.rawResults)))}),{});return new ve.a.SearchResults(new ve.a.SearchParameters(e.state),e.rawResults)}(a),error:null,searching:!1,isSearchStalled:!0,searchingForFacetValues:!1});function g(e){return p.getWidgets().filter((function(e){return Boolean(e.getMetadata)})).map((function(t){return t.getMetadata(e)}))}function v(){var e=p.getWidgets().filter((function(e){return Boolean(e.getSearchParameters)})).filter((function(e){return!xe(e)&&!Fe(e)})).reduce((function(e,t){return t.getSearchParameters(e)}),d),r=p.getWidgets().filter((function(e){return Boolean(e.getSearchParameters)})).filter((function(e){var r=xe(e)&&Re(e,t),n=Fe(e)&&Se(e,t);return r||n})).sort(Pe).reduce((function(e,t){return t.getSearchParameters(e)}),e),n=p.getWidgets().filter((function(e){return Boolean(e.getSearchParameters)})).filter((function(e){var r=xe(e)&&!Re(e,t),n=Fe(e)&&!Se(e,t);return r||n})).sort(Pe).reduce((function(e,t){var r=xe(t)?t.props.indexContextValue.targetedIndex:t.props.indexId;return h({},e,f({},r,(e[r]||[]).concat(t)))}),{});return{mainParameters:r,derivedParameters:Object.keys(n).map((function(t){return{parameters:n[t].reduce((function(e,t){return t.getSearchParameters(e)}),e),indexId:t}}))}}function y(){if(!o){var e=v(c.state),t=e.mainParameters,r=e.derivedParameters;c.derivedHelpers.slice().forEach((function(e){e.detach()})),r.forEach((function(e){var t=e.indexId,r=e.parameters;c.derive((function(){return r})).on("result",b({indexId:t})).on("error",x)})),c.setState(t),c.search()}}function b(e){var t=e.indexId;return function(e){var r=m.getState(),n=!c.derivedHelpers.length,i=r.results?r.results:{};i=!n&&i.getFacetByName?{}:i,n?i=e.results:i[t]=e.results;var a=m.getState(),s=a.isSearchStalled;c.hasPendingRequests()||(clearTimeout(u),u=null,s=!1);a.resultsFacetValues;var o=l(a,["resultsFacetValues"]);m.setState(h({},o,{results:i,isSearchStalled:s,searching:!1,error:null}))}}function x(e){var t=e.error,r=m.getState(),n=r.isSearchStalled;c.hasPendingRequests()||(clearTimeout(u),n=!1);r.resultsFacetValues;var i=l(r,["resultsFacetValues"]);m.setState(h({},i,{isSearchStalled:n,error:t,searching:!1}))}return{store:m,widgetsManager:p,getWidgetsIds:function(){return m.getState().metadata.reduce((function(e,t){return void 0!==t.id?e.concat(t.id):e}),[])},getSearchParameters:v,onSearchForFacetValues:function(e){var t=e.facetName,r=e.query,n=e.maxFacetHits,i=void 0===n?10:n,a=Math.max(1,Math.min(i,100));m.setState(h({},m.getState(),{searchingForFacetValues:!0})),c.searchForFacetValues(t,r,a).then((function(e){var n;m.setState(h({},m.getState(),{error:null,searchingForFacetValues:!1,resultsFacetValues:h({},m.getState().resultsFacetValues,(n={},f(n,t,e.facetHits),f(n,"query",r),n))}))}),(function(e){m.setState(h({},m.getState(),{searchingForFacetValues:!1,error:e}))})).catch((function(e){setTimeout((function(){throw e}))}))},onExternalStateUpdate:function(e){var t=g(e);m.setState(h({},m.getState(),{widgets:e,metadata:t,searching:!0})),y()},transitionState:function(e){var t=m.getState().widgets;return p.getWidgets().filter((function(e){return Boolean(e.transitionState)})).reduce((function(e,r){return r.transitionState(t,e)}),e)},updateClient:function(e){be(e),c.setClient(e),y()},updateIndex:function(e){d=d.setIndex(e)},clearCache:function(){c.clearCache(),y()},skipSearch:function(){o=!0}}}function we(e){return Boolean(e.searchState)}var Ee=function(e){function t(e){var r;d(this,t),f(v(r=y(this,b(t).call(this,e))),"isUnmounting",!1);var n=Oe({indexName:r.props.indexName,searchClient:r.props.searchClient,initialState:r.props.searchState||{},resultsState:r.props.resultsState,stalledSearchDelay:r.props.stalledSearchDelay}),i={store:n.store,widgetsManager:n.widgetsManager,mainTargetedIndex:r.props.indexName,onInternalStateUpdate:r.onWidgetsInternalStateUpdate.bind(v(r)),createHrefForState:r.createHrefForState.bind(v(r)),onSearchForFacetValues:r.onSearchForFacetValues.bind(v(r)),onSearchStateChange:r.onSearchStateChange.bind(v(r)),onSearchParameters:r.onSearchParameters.bind(v(r))};return r.state={isControlled:we(r.props),instantSearchManager:n,contextValue:i},r}return R(t,e),m(t,null,[{key:"getDerivedStateFromProps",value:function(e,t){var r=we(e),n=t.instantSearchManager.store.getState().widgets,i=e.searchState;return r&&!S()(n,i)&&t.instantSearchManager.onExternalStateUpdate(e.searchState),{isControlled:r,contextValue:h({},t.contextValue,{mainTargetedIndex:e.indexName})}}}]),m(t,[{key:"componentDidUpdate",value:function(e){var t=we(e);if(t&&!this.state.isControlled)throw new Error("You can't switch <InstantSearch> from being controlled to uncontrolled");if(!t&&this.state.isControlled)throw new Error("You can't switch <InstantSearch> from being uncontrolled to controlled");this.props.refresh!==e.refresh&&this.props.refresh&&this.state.instantSearchManager.clearCache(),e.indexName!==this.props.indexName&&this.state.instantSearchManager.updateIndex(this.props.indexName),e.searchClient!==this.props.searchClient&&this.state.instantSearchManager.updateClient(this.props.searchClient)}},{key:"componentWillUnmount",value:function(){this.isUnmounting=!0,this.state.instantSearchManager.skipSearch()}},{key:"createHrefForState",value:function(e){return e=this.state.instantSearchManager.transitionState(e),this.state.isControlled&&this.props.createURL?this.props.createURL(e,this.getKnownKeys()):"#"}},{key:"onWidgetsInternalStateUpdate",value:function(e){e=this.state.instantSearchManager.transitionState(e),this.onSearchStateChange(e),this.state.isControlled||this.state.instantSearchManager.onExternalStateUpdate(e)}},{key:"onSearchStateChange",value:function(e){this.props.onSearchStateChange&&!this.isUnmounting&&this.props.onSearchStateChange(e)}},{key:"onSearchParameters",value:function(e,t,r){if(this.props.onSearchParameters){var n=this.props.searchState?this.props.searchState:{};this.props.onSearchParameters(e,t,r,n)}}},{key:"onSearchForFacetValues",value:function(e){this.state.instantSearchManager.onSearchForFacetValues(e)}},{key:"getKnownKeys",value:function(){return this.state.instantSearchManager.getWidgetsIds()}},{key:"render",value:function(){return 0===n.Children.count(this.props.children)?null:i.a.createElement(C,{value:this.state.contextValue},this.props.children)}}]),t}(n.Component);f(Ee,"defaultProps",{stalledSearchDelay:200,refresh:!1}),f(Ee,"propTypes",{indexName:G.a.string.isRequired,searchClient:G.a.shape({search:G.a.func.isRequired,searchForFacetValues:G.a.func,addAlgoliaAgent:G.a.func,clearCache:G.a.func}).isRequired,createURL:G.a.func,refresh:G.a.bool,searchState:G.a.object,onSearchStateChange:G.a.func,onSearchParameters:G.a.func,resultsState:G.a.oneOfType([G.a.object,G.a.array]),children:G.a.node,stalledSearchDelay:G.a.number});var _e=Ee,Ce=k({displayName:"AlgoliaScrollTo",propTypes:{scrollOn:G.a.string},defaultProps:{scrollOn:"page"},getProvidedProps:function(e,t){var r=e.scrollOn,n=Q(e,t,{ais:e.contextValue,multiIndexContext:e.indexContextValue},r,null);this._prevSearchState||(this._prevSearchState={}),H({ais:e.contextValue,multiIndexContext:e.indexContextValue})&&(t=t.indices?t.indices[T({ais:e.contextValue,multiIndexContext:e.indexContextValue})]:{});var i=w(t,["configure",r]),a=P(this._prevSearchState,i);return this._prevSearchState=i,{value:n,hasNotChanged:a}}}),Ne=K("ScrollTo"),Ae=function(e){function t(){return d(this,t),y(this,b(t).apply(this,arguments))}return R(t,e),m(t,[{key:"componentDidUpdate",value:function(e){var t=this.props,r=t.value,n=t.hasNotChanged;r!==e.value&&n&&this.el.scrollIntoView()}},{key:"render",value:function(){var e=this;return i.a.createElement("div",{ref:function(t){return e.el=t},className:Ne("")},this.props.children)}}]),t}(n.Component);f(Ae,"propTypes",{value:G.a.any,children:G.a.node,hasNotChanged:G.a.bool});var ke=Ce(Ae);function Te(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var Ve=s()(algoliaSearchData.applicationId,algoliaSearchData.publicApiKey);new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderModule()}var t,r,n;return t=e,(r=[{key:"renderModule",value:function(){var e=L((function(e){var t=e.searchState,r=e.searchResults,n=e.children;return r&&0!==r.nbHits?n:i.a.createElement("div",{className:"notice info"},i.a.createElement("i",{className:"fa fa-info-circle"}),algoliaTranslations.noresult,' "',t.query?t.query:o.a.parse(location.search.slice(1)).s,'".')})),t=function(e){var t=e.hits;return i.a.createElement("ul",{className:"c-searchresult"},t.map((function(e){return i.a.createElement("div",{key:e.objectID,className:"c-searchresult__item"},i.a.createElement("div",{className:"c-searchresult__grid"},i.a.createElement("div",{className:"c-searchresult__inlay"},i.a.createElement("h3",{className:"c-searchresult__heading"},i.a.createElement("a",{href:e.permalink,className:"c-searchresult__href"},i.a.createElement(re,{attribute:"post_title",hit:e})),i.a.createElement("span",{className:"c-searchresult__origin"},e.origin_site)),i.a.createElement("p",{className:"c-searchresult__content"},i.a.createElement(re,{attribute:"content",hit:e}))),e.thumbnail?i.a.createElement("img",{src:e.thumbnail,className:"c-searchresult__thumbnail"}):""),i.a.createElement("div",{className:"c-searchresult__metainfo"},i.a.createElement("a",{className:"c-searchresult__permalink",href:e.permalink},i.a.createElement(re,{attribute:"permalink",hit:e}))))})))},r=ae((function(e){var t=e.currentRefinement,r=(e.isSearchStalled,e.refine);return i.a.createElement("form",{className:"c-searchform",noValidate:"noValidate",action:"/",role:"search",itemProp:"potentialAction",itemScope:"",itemType:"http://schema.org/SearchAction"},i.a.createElement("label",{htmlFor:"searchkeyword",className:"sr-only c-searchform__label"},"Search"),i.a.createElement("input",{id:"searchkeyword",className:"c-searchform__input",autoComplete:"off",type:"search",value:t,onChange:function(e){return r(e.currentTarget.value)},required:"",placeholder:"What are you looking for?",name:"s"}))})),n=se(t),a=oe((function(e){var t=e.currentRefinement,r=e.nbPages,n=e.refine,a=e.createURL;return i.a.createElement("ul",{className:"c-searchpagination"},new Array(r).fill(null).map((function(e,r){var s=r+1,c={fontWeight:t===s?"bold":"",color:t===s?"":"#000"};return i.a.createElement("li",{className:"c-searchpagination__item",key:r},i.a.createElement("a",{href:a(s),style:c,onClick:function(e){e.preventDefault(),n(s)}},s))})))})),s=L((function(e){var t=e.searchResults,r=t&&t.nbHits;return r?i.a.createElement("div",{className:"c-searchresusult__postcount"},i.a.createElement("strong",null,r)," ",algoliaTranslations.nposts):i.a.createElement("div",{className:"c-searchresusult__postcount c-searchresusult__postcount--hidden"})})),c=me((function(e){var t=e.items,r=(e.isFromSearch,e.refine),n=(e.searchForItems,e.createURL);return i.a.createElement("div",{className:"c-searchtabs ".concat(t.length>1?"c-searchtabs--visible":"c-searchtabs--hidden")},i.a.createElement("label",{className:"c-searchtabs__label"},i.a.createElement("span",{className:"c-searchtabs__icon"})," ",i.a.createElement("span",{className:"c-searchtabs__text"},algoliaTranslations.filter,": ")),i.a.createElement("ul",null,t.map((function(e){return i.a.createElement("li",{className:"c-searchtabs__tab",key:e.value},i.a.createElement("a",{className:"c-searchtabs__link",href:n(e.value),style:{fontWeight:e.isRefined?"bold":""},onClick:function(t){t.preventDefault(),r(e.value)}},i.a.createElement("span",{className:"c-searchtabs_label"},e.label),i.a.createElement("span",{className:"c-searchtabs_count"},e.count)))}))))})),u=document.getElementById("algolia-instantsearch-react");void 0===u?console.log("Could not find mount for algolia-index instant searchbox mountpoint."):ReactDOM.render(i.a.createElement(_e,{indexName:algoliaSearchData.indexName,searchClient:Ve},i.a.createElement(ke,null,i.a.createElement(r,{autoFocus:!0,defaultRefinement:o.a.parse(location.search.slice(1)).s,onSubmit:function(e){e.preventDefault()}}),i.a.createElement("div",{className:"c-searchmeta"},i.a.createElement(s,null),i.a.createElement(c,{attribute:"origin_site"})),i.a.createElement(e,null,i.a.createElement(n,{hitComponent:t}))),i.a.createElement(a,null)),u)}}])&&Te(t.prototype,r),n&&Te(t,n),e}())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=app.5c9dde1338e878d39cbb.js.map